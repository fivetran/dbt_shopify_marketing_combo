{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.6", "generated_at": "2024-09-05T20:04:22.183912Z", "invocation_id": "a26c283f-9d3c-4391-9f34-9eca7e91afc5", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.423716Z", "completed_at": "2024-09-05T20:04:16.447057Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.455729Z", "completed_at": "2024-09-05T20:04:16.455742Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03258204460144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"klaviyo_campaign\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.450503Z", "completed_at": "2024-09-05T20:04:16.456866Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.457814Z", "completed_at": "2024-09-05T20:04:16.457817Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01232290267944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"klaviyo_flow\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.447274Z", "completed_at": "2024-09-05T20:04:16.457413Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.458364Z", "completed_at": "2024-09-05T20:04:16.458367Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01323699951171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"klaviyo_event\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.453186Z", "completed_at": "2024-09-05T20:04:16.457593Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.458734Z", "completed_at": "2024-09-05T20:04:16.458738Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012939214706420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"klaviyo_metric\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.459428Z", "completed_at": "2024-09-05T20:04:16.464589Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.479574Z", "completed_at": "2024-09-05T20:04:16.479580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022461891174316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"klaviyo_person\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.476732Z", "completed_at": "2024-09-05T20:04:16.483446Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.484266Z", "completed_at": "2024-09-05T20:04:16.484277Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020614147186279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"abandoned_checkout_discount_code\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.479971Z", "completed_at": "2024-09-05T20:04:16.483932Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.484877Z", "completed_at": "2024-09-05T20:04:16.484885Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020995140075683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"abandoned_checkout_shipping_line\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.485717Z", "completed_at": "2024-09-05T20:04:16.490816Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.496364Z", "completed_at": "2024-09-05T20:04:16.496371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012737035751342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"abandoned_checkout\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.493811Z", "completed_at": "2024-09-05T20:04:16.497476Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.498112Z", "completed_at": "2024-09-05T20:04:16.498116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008072853088378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"collection\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.491026Z", "completed_at": "2024-09-05T20:04:16.497697Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.498474Z", "completed_at": "2024-09-05T20:04:16.498478Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008779764175415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"collection_product\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.498834Z", "completed_at": "2024-09-05T20:04:16.503052Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.506739Z", "completed_at": "2024-09-05T20:04:16.506743Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009564876556396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"customer_tag\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.503435Z", "completed_at": "2024-09-05T20:04:16.510441Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.511310Z", "completed_at": "2024-09-05T20:04:16.511316Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009020090103149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"customer\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.507105Z", "completed_at": "2024-09-05T20:04:16.511049Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.514855Z", "completed_at": "2024-09-05T20:04:16.514860Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012298107147216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"discount_code\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.511727Z", "completed_at": "2024-09-05T20:04:16.516627Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.517230Z", "completed_at": "2024-09-05T20:04:16.517234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007098197937011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"fulfillment_event\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.517562Z", "completed_at": "2024-09-05T20:04:16.523660Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.527474Z", "completed_at": "2024-09-05T20:04:16.527479Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011482000350952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"fulfillment\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.520200Z", "completed_at": "2024-09-05T20:04:16.523857Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.527856Z", "completed_at": "2024-09-05T20:04:16.527859Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011569023132324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"inventory_item\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.524070Z", "completed_at": "2024-09-05T20:04:16.528825Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.529514Z", "completed_at": "2024-09-05T20:04:16.529517Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00638890266418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"inventory_level\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.530524Z", "completed_at": "2024-09-05T20:04:16.539151Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.539686Z", "completed_at": "2024-09-05T20:04:16.539692Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010716915130615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"location\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.533161Z", "completed_at": "2024-09-05T20:04:16.539419Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.540103Z", "completed_at": "2024-09-05T20:04:16.540107Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010872125625610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"metafield\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__metafield_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.536275Z", "completed_at": "2024-09-05T20:04:16.540701Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.541482Z", "completed_at": "2024-09-05T20:04:16.541485Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058917999267578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_adjustment\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_adjustment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.542669Z", "completed_at": "2024-09-05T20:04:16.552192Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.552687Z", "completed_at": "2024-09-05T20:04:16.552693Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011505126953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_discount_code\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.546498Z", "completed_at": "2024-09-05T20:04:16.552465Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.553087Z", "completed_at": "2024-09-05T20:04:16.553090Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011327981948852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_line_refund\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.549654Z", "completed_at": "2024-09-05T20:04:16.553404Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.554241Z", "completed_at": "2024-09-05T20:04:16.554245Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008080720901489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_line\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.556069Z", "completed_at": "2024-09-05T20:04:16.565708Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.566060Z", "completed_at": "2024-09-05T20:04:16.566067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011543035507202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_note_attribute\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.558700Z", "completed_at": "2024-09-05T20:04:16.566449Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.567263Z", "completed_at": "2024-09-05T20:04:16.567267Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012491941452026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_shipping_line\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.562697Z", "completed_at": "2024-09-05T20:04:16.566960Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.567896Z", "completed_at": "2024-09-05T20:04:16.567899Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012105941772460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_shipping_tax_line\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.569254Z", "completed_at": "2024-09-05T20:04:16.575606Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.578662Z", "completed_at": "2024-09-05T20:04:16.578670Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01110982894897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_tag\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.572926Z", "completed_at": "2024-09-05T20:04:16.579461Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.580171Z", "completed_at": "2024-09-05T20:04:16.580175Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011201143264770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_table\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.575834Z", "completed_at": "2024-09-05T20:04:16.579955Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.580723Z", "completed_at": "2024-09-05T20:04:16.580726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008589029312133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"order_url_tag\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.581343Z", "completed_at": "2024-09-05T20:04:16.586087Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.589239Z", "completed_at": "2024-09-05T20:04:16.589245Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0096282958984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"price_rule\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.586490Z", "completed_at": "2024-09-05T20:04:16.593094Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.593545Z", "completed_at": "2024-09-05T20:04:16.593550Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008299827575683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"product_image\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.589651Z", "completed_at": "2024-09-05T20:04:16.596529Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.597109Z", "completed_at": "2024-09-05T20:04:16.597113Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011535167694091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"product_tag\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.593899Z", "completed_at": "2024-09-05T20:04:16.597959Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.598690Z", "completed_at": "2024-09-05T20:04:16.598694Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005895137786865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"product\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.599032Z", "completed_at": "2024-09-05T20:04:16.606336Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.609341Z", "completed_at": "2024-09-05T20:04:16.609347Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011936187744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"product_variant\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.603122Z", "completed_at": "2024-09-05T20:04:16.609144Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.609780Z", "completed_at": "2024-09-05T20:04:16.609784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011397123336791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"refund\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.606573Z", "completed_at": "2024-09-05T20:04:16.610405Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.611193Z", "completed_at": "2024-09-05T20:04:16.611196Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005419015884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"shop\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.612486Z", "completed_at": "2024-09-05T20:04:16.621967Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.622276Z", "completed_at": "2024-09-05T20:04:16.622283Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011384248733520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"tax_line\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.615591Z", "completed_at": "2024-09-05T20:04:16.622645Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.623386Z", "completed_at": "2024-09-05T20:04:16.623390Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011844158172607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"tender_transaction\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.619380Z", "completed_at": "2024-09-05T20:04:16.623113Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.624036Z", "completed_at": "2024-09-05T20:04:16.624040Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008793115615844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12\".\"transaction\"", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.625355Z", "completed_at": "2024-09-05T20:04:16.626682Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.627325Z", "completed_at": "2024-09-05T20:04:16.627329Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003596067428588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.abandoned_checkout", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.627827Z", "completed_at": "2024-09-05T20:04:16.628988Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.630779Z", "completed_at": "2024-09-05T20:04:16.630783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005697011947631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.abandoned_checkout_discount_code", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.629425Z", "completed_at": "2024-09-05T20:04:16.630559Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.631341Z", "completed_at": "2024-09-05T20:04:16.631345Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004493236541748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.abandoned_checkout_shipping_line", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.632566Z", "completed_at": "2024-09-05T20:04:16.634749Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.635636Z", "completed_at": "2024-09-05T20:04:16.635643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0045740604400634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.collection", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.636257Z", "completed_at": "2024-09-05T20:04:16.637674Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.640017Z", "completed_at": "2024-09-05T20:04:16.640024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0077838897705078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.collection_product", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.638410Z", "completed_at": "2024-09-05T20:04:16.639724Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.640688Z", "completed_at": "2024-09-05T20:04:16.640691Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0057489871978759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.customer", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.642143Z", "completed_at": "2024-09-05T20:04:16.643355Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.644012Z", "completed_at": "2024-09-05T20:04:16.644016Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003604888916015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.customer_tag", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.644521Z", "completed_at": "2024-09-05T20:04:16.646492Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.648837Z", "completed_at": "2024-09-05T20:04:16.648842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0070400238037109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.discount_code", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.647184Z", "completed_at": "2024-09-05T20:04:16.648570Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.649464Z", "completed_at": "2024-09-05T20:04:16.649468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005927085876464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.fulfillment", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.650682Z", "completed_at": "2024-09-05T20:04:16.651970Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.652576Z", "completed_at": "2024-09-05T20:04:16.652579Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003389120101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.fulfillment_event", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.653055Z", "completed_at": "2024-09-05T20:04:16.654228Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.656027Z", "completed_at": "2024-09-05T20:04:16.656031Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00563502311706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.inventory_item", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.654698Z", "completed_at": "2024-09-05T20:04:16.655826Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.656568Z", "completed_at": "2024-09-05T20:04:16.656571Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004424333572387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.inventory_level", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.658258Z", "completed_at": "2024-09-05T20:04:16.660586Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.661328Z", "completed_at": "2024-09-05T20:04:16.661334Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0050199031829833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.klaviyo_campaign", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.661872Z", "completed_at": "2024-09-05T20:04:16.663074Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.665025Z", "completed_at": "2024-09-05T20:04:16.665029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007179975509643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.klaviyo_event", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.663528Z", "completed_at": "2024-09-05T20:04:16.664749Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.665630Z", "completed_at": "2024-09-05T20:04:16.665633Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004803180694580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.klaviyo_flow", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.666786Z", "completed_at": "2024-09-05T20:04:16.668028Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.668675Z", "completed_at": "2024-09-05T20:04:16.668678Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0033228397369384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.klaviyo_metric", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.669202Z", "completed_at": "2024-09-05T20:04:16.670513Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.673680Z", "completed_at": "2024-09-05T20:04:16.673686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0072138309478759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.klaviyo_person", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.671173Z", "completed_at": "2024-09-05T20:04:16.673364Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.674329Z", "completed_at": "2024-09-05T20:04:16.674332Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006117820739746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.location", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.675609Z", "completed_at": "2024-09-05T20:04:16.676865Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.677582Z", "completed_at": "2024-09-05T20:04:16.677585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035359859466552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.metafield", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.678097Z", "completed_at": "2024-09-05T20:04:16.679240Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.681035Z", "completed_at": "2024-09-05T20:04:16.681039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057108402252197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.679669Z", "completed_at": "2024-09-05T20:04:16.680814Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.681577Z", "completed_at": "2024-09-05T20:04:16.681580Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0044710636138916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_adjustment", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.682739Z", "completed_at": "2024-09-05T20:04:16.684647Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.685325Z", "completed_at": "2024-09-05T20:04:16.685329Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004003047943115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_discount_code", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.685811Z", "completed_at": "2024-09-05T20:04:16.687134Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.689056Z", "completed_at": "2024-09-05T20:04:16.689060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006625175476074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_line", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.687652Z", "completed_at": "2024-09-05T20:04:16.688822Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.689829Z", "completed_at": "2024-09-05T20:04:16.689831Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004970550537109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_line_refund", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.691404Z", "completed_at": "2024-09-05T20:04:16.692510Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.693164Z", "completed_at": "2024-09-05T20:04:16.693172Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003628969192504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_note_attribute", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.693810Z", "completed_at": "2024-09-05T20:04:16.695304Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.698305Z", "completed_at": "2024-09-05T20:04:16.698310Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007414102554321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_shipping_line", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.695975Z", "completed_at": "2024-09-05T20:04:16.698035Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.699044Z", "completed_at": "2024-09-05T20:04:16.699050Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006404876708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_shipping_tax_line", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.700348Z", "completed_at": "2024-09-05T20:04:16.701561Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.702207Z", "completed_at": "2024-09-05T20:04:16.702212Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035469532012939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_tag", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.702727Z", "completed_at": "2024-09-05T20:04:16.703912Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.706630Z", "completed_at": "2024-09-05T20:04:16.706639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006632328033447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.order_url_tag", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.705049Z", "completed_at": "2024-09-05T20:04:16.706345Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.707397Z", "completed_at": "2024-09-05T20:04:16.707401Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00565791130065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.price_rule", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.708843Z", "completed_at": "2024-09-05T20:04:16.710812Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.711720Z", "completed_at": "2024-09-05T20:04:16.711726Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004673957824707031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.product", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.712340Z", "completed_at": "2024-09-05T20:04:16.753665Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.756006Z", "completed_at": "2024-09-05T20:04:16.756012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.047507286071777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.product_image", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.754538Z", "completed_at": "2024-09-05T20:04:16.755752Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.763112Z", "completed_at": "2024-09-05T20:04:16.763118Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05207395553588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.product_tag", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.764867Z", "completed_at": "2024-09-05T20:04:16.766272Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.767247Z", "completed_at": "2024-09-05T20:04:16.767250Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004452228546142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.product_variant", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.767751Z", "completed_at": "2024-09-05T20:04:16.768897Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.772119Z", "completed_at": "2024-09-05T20:04:16.772125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007807016372680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.refund", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.769592Z", "completed_at": "2024-09-05T20:04:16.771821Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.772721Z", "completed_at": "2024-09-05T20:04:16.772724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0061719417572021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.shop", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.773870Z", "completed_at": "2024-09-05T20:04:16.775121Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.775726Z", "completed_at": "2024-09-05T20:04:16.775729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003269672393798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.tax_line", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.776210Z", "completed_at": "2024-09-05T20:04:16.777329Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.779053Z", "completed_at": "2024-09-05T20:04:16.779057Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054509639739990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.tender_transaction", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.777743Z", "completed_at": "2024-09-05T20:04:16.778842Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.779569Z", "completed_at": "2024-09-05T20:04:16.779572Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004281759262084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_holistic_reporting_integration_tests.transaction", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.464987Z", "completed_at": "2024-09-05T20:04:16.764634Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:16.767046Z", "completed_at": "2024-09-05T20:04:16.767051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3398878574371338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2074\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.792191Z", "completed_at": "2024-09-05T20:04:17.138815Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.139231Z", "completed_at": "2024-09-05T20:04:17.139234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38507699966430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    trigger_type\n    \n as \n    \n    trigger_type\n    \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as TEXT ) as flow_id,\n        name as flow_name,\n        status,\n        updated as updated_at,\n        archived as is_archived,\n        trigger_type,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.780734Z", "completed_at": "2024-09-05T20:04:17.138329Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.138593Z", "completed_at": "2024-09-05T20:04:17.138596Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.39191293716430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_type\n    \n as \n    \n    campaign_type\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email_template_id\n    \n as \n    \n    email_template_id\n    \n, \n    \n    \n    from_email\n    \n as \n    \n    from_email\n    \n, \n    \n    \n    from_name\n    \n as \n    \n    from_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    send_time\n    \n as \n    \n    send_time\n    \n, \n    \n    \n    sent_at\n    \n as \n    \n    sent_at\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_id\n    \n as \n    \n    status_id\n    \n, \n    \n    \n    status_label\n    \n as \n    \n    status_label\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    scheduled\n    \n as \n    \n    scheduled\n    \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        campaign_type,\n        created as created_at,\n        email_template_id,\n        from_email,\n        from_name,\n        cast(id as TEXT ) as campaign_id,\n        name as campaign_name,\n        send_time as scheduled_to_send_at,\n        sent_at,\n        coalesce(status, lower(status_label)) as status,\n        status_id,\n        subject,\n        updated as updated_at,\n        archived as is_archived,\n        scheduled as scheduled_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.796703Z", "completed_at": "2024-09-05T20:04:17.139057Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.139425Z", "completed_at": "2024-09-05T20:04:17.139428Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.38032007217407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _variation\n    \n as \n    \n    _variation\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    datetime\n    \n as \n    \n    datetime\n    \n, \n    \n    \n    flow_id\n    \n as \n    \n    flow_id\n    \n, \n    \n    \n    flow_message_id\n    \n as \n    \n    flow_message_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metric_id\n    \n as \n    \n    metric_id\n    \n, \n    \n    \n    person_id\n    \n as \n    \n    person_id\n    \n, \n    \n    \n    timestamp\n    \n as \n    \n    timestamp\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    property_value\n    \n as \n    \n    property_value\n    \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nrename as (\n    \n    select \n        _variation as variation_id,\n        cast(campaign_id as TEXT ) as campaign_id,\n        cast(timestamp as timestamp ) as occurred_at,\n        cast(flow_id as TEXT ) as flow_id,\n        flow_message_id,\n        cast(id as TEXT ) as event_id,\n        cast(metric_id as TEXT ) as metric_id,\n        cast(person_id as TEXT ) as person_id,\n        type,\n        uuid,\n        \n\n    cast(regexp_replace(cast(property_value as TEXT), '[^0-9.]*', '', 'g') as numeric(28,6))\n\n as numeric_value,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        source_relation\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfinal as (\n    \n    select \n        *,\n        cast( date_trunc('day', occurred_at) as date) as occurred_on,\n        md5(cast(coalesce(cast(event_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id\n\n    from rename\n\n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:16.804875Z", "completed_at": "2024-09-05T20:04:17.137846Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.138096Z", "completed_at": "2024-09-05T20:04:17.138103Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.36786890029907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    integration_id\n    \n as \n    \n    integration_id\n    \n, \n    \n    \n    integration_category\n    \n as \n    \n    integration_category\n    \n, \n    \n    \n    integration_name\n    \n as \n    \n    integration_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as TEXT ) as metric_id,\n        cast(integration_id as TEXT ) as integration_id,\n        integration_name,\n        integration_category,\n        name as metric_name,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.166592Z", "completed_at": "2024-09-05T20:04:17.431532Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.431792Z", "completed_at": "2024-09-05T20:04:17.431799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31835412979125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    organization\n    \n as \n    \n    organization\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    \n    \n    last_event_date\n    \n as \n    \n    last_event_date\n    \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT ) as person_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        zip,\n        created as created_at,\n        email,\n        first_name || ' ' || last_name as full_name,\n        latitude,\n        longitude,\n        organization,\n        phone_number,\n        region, -- state in USA\n        timezone,\n        title,\n        updated as updated_at,\n        last_event_date,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.174974Z", "completed_at": "2024-09-05T20:04:17.487204Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.487932Z", "completed_at": "2024-09-05T20:04:17.487938Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.33956098556518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null and index is null\n            then row_number() over(partition by source_relation order by source_relation)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.185636Z", "completed_at": "2024-09-05T20:04:17.488197Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.488963Z", "completed_at": "2024-09-05T20:04:17.488967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3400120735168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abandoned_checkout_url\n    \n as \n    \n    abandoned_checkout_url\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_duties\n    \n as \n    \n    total_duties\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        user_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.179983Z", "completed_at": "2024-09-05T20:04:17.488674Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.489400Z", "completed_at": "2024-09-05T20:04:17.489402Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.35209083557128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    delivery_expectation_range\n    \n as \n    \n    delivery_expectation_range\n    \n, \n    \n    \n    delivery_expectation_range_max\n    \n as \n    \n    delivery_expectation_range_max\n    \n, \n    \n    \n    delivery_expectation_range_min\n    \n as \n    \n    delivery_expectation_range_min\n    \n, \n    \n    \n    delivery_expectation_type\n    \n as \n    \n    delivery_expectation_type\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.489630Z", "completed_at": "2024-09-05T20:04:17.739171Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.739544Z", "completed_at": "2024-09-05T20:04:17.739553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2761521339416504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    disjunctive\n    \n as \n    \n    disjunctive\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    rules\n    \n as \n    \n    rules\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.515396Z", "completed_at": "2024-09-05T20:04:17.783746Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.784389Z", "completed_at": "2024-09-05T20:04:17.784401Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3253359794616699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    collection_id\n    \n as \n    \n    collection_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.521385Z", "completed_at": "2024-09-05T20:04:17.784087Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.784710Z", "completed_at": "2024-09-05T20:04:17.784714Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.32508206367492676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.528509Z", "completed_at": "2024-09-05T20:04:17.840740Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:17.841671Z", "completed_at": "2024-09-05T20:04:17.841674Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3392369747161865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as \n    \n    accepts_marketing\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    verified_email\n    \n as \n    \n    verified_email\n    \n, \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        cast(\n    cast(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as marketing_consent_updated_at,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.765549Z", "completed_at": "2024-09-05T20:04:18.003671Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.003895Z", "completed_at": "2024-09-05T20:04:18.003901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.26247096061706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    price_rule_id\n    \n as \n    \n    price_rule_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_count\n    \n as \n    \n    usage_count\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.849047Z", "completed_at": "2024-09-05T20:04:18.116149Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.116378Z", "completed_at": "2024-09-05T20:04:18.116384Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3113441467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    service\n    \n as \n    \n    service\n    \n, \n    \n    \n    shipment_status\n    \n as \n    \n    shipment_status\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tracking_company\n    \n as \n    \n    tracking_company\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    tracking_numbers\n    \n as \n    \n    tracking_numbers\n    \n, \n    \n    \n    tracking_urls\n    \n as \n    \n    tracking_urls\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.842534Z", "completed_at": "2024-09-05T20:04:18.152155Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.152699Z", "completed_at": "2024-09-05T20:04:18.152709Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3419172763824463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_event_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    estimated_delivery_at\n    \n as \n    \n    estimated_delivery_at\n    \n, \n    \n    \n    fulfillment_id\n    \n as \n    \n    fulfillment_id\n    \n, \n    \n    \n    happened_at\n    \n as \n    \n    happened_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    shop_id\n    \n as \n    \n    shop_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_event_id,\n        fulfillment_id,\n        shop_id,\n        order_id,\n        status,\n        message,\n        cast(\n    cast(cast(estimated_delivery_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as estimated_delivery_at,\n        cast(\n    cast(cast(happened_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as happened_at,\n        address_1,\n        city,\n        province,\n        country,\n        zip,\n        latitude,\n        longitude,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:17.867833Z", "completed_at": "2024-09-05T20:04:18.168146Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.168427Z", "completed_at": "2024-09-05T20:04:18.168434Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.33139896392822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    country_code_of_origin\n    \n as \n    \n    country_code_of_origin\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    province_code_of_origin\n    \n as \n    \n    province_code_of_origin\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    tracked\n    \n as \n    \n    tracked\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.028650Z", "completed_at": "2024-09-05T20:04:18.328707Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.328964Z", "completed_at": "2024-09-05T20:04:18.328971Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.32451915740966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    available\n    \n as \n    \n    available\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.161227Z", "completed_at": "2024-09-05T20:04:18.436587Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.436927Z", "completed_at": "2024-09-05T20:04:18.436935Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3011481761932373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    legacy\n    \n as \n    \n    legacy\n    \n, \n    \n    \n    localized_country_name\n    \n as \n    \n    localized_country_name\n    \n, \n    \n    \n    localized_province_name\n    \n as \n    \n    localized_province_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.189702Z", "completed_at": "2024-09-05T20:04:18.519981Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.520192Z", "completed_at": "2024-09-05T20:04:18.520195Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3560631275177002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__metafield_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    namespace\n    \n as \n    \n    namespace\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    owner_resource\n    \n as \n    \n    owner_resource\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null and updated_at is null\n            then row_number() over(partition by source_relation order by source_relation) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__metafield\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.223552Z", "completed_at": "2024-09-05T20:04:18.519370Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.519670Z", "completed_at": "2024-09-05T20:04:18.519678Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3295731544494629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_adjustment_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set\n    \n as \n    \n    amount_set\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_set\n    \n as \n    \n    tax_amount_set\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_adjustment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.354528Z", "completed_at": "2024-09-05T20:04:18.610759Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.611000Z", "completed_at": "2024-09-05T20:04:18.611006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2826271057128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.463579Z", "completed_at": "2024-09-05T20:04:18.712487Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.712761Z", "completed_at": "2024-09-05T20:04:18.712768Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2757270336151123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    subtotal_set\n    \n as \n    \n    subtotal_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.545164Z", "completed_at": "2024-09-05T20:04:18.812499Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.812743Z", "completed_at": "2024-09-05T20:04:18.812750Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2922959327697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as \n    \n    gift_card\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    pre_tax_price\n    \n as \n    \n    pre_tax_price\n    \n, \n    cast(null as TEXT) as \n    \n    pre_tax_price_set\n    \n , \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    cast(null as TEXT) as \n    \n    tax_code\n    \n , \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    cast(null as TEXT) as \n    \n    total_discount_set\n    \n , \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    cast(null as TEXT) as \n    \n    variant_title\n    \n , \n    cast(null as TEXT) as \n    \n    variant_inventory_management\n    \n , \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.552163Z", "completed_at": "2024-09-05T20:04:18.813045Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.813273Z", "completed_at": "2024-09-05T20:04:18.813276Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2916831970214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.637819Z", "completed_at": "2024-09-05T20:04:18.894416Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.894682Z", "completed_at": "2024-09-05T20:04:18.894689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2805759906768799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    discounted_price_set\n    \n as \n    \n    discounted_price_set\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.739414Z", "completed_at": "2024-09-05T20:04:18.978197Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:18.978482Z", "completed_at": "2024-09-05T20:04:18.978490Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.26338887214660645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_shipping_line_id\n    \n as \n    \n    order_shipping_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.837982Z", "completed_at": "2024-09-05T20:04:19.092796Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.093137Z", "completed_at": "2024-09-05T20:04:19.093144Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3360579013824463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.844841Z", "completed_at": "2024-09-05T20:04:19.186645Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.186883Z", "completed_at": "2024-09-05T20:04:19.186888Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3676748275756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    cast(null as TEXT) as \n    \n    total_discounts_set\n    \n , \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_line_items_price_set\n    \n , \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    cast(null as float) as \n    \n    total_tip_received\n    \n , \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    checkout_token\n    \n as \n    \n    checkout_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    cast(null as TEXT) as \n    \n    total_shipping_price_set\n    \n , \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as integer) as \n    \n    app_id\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as TEXT) as \n    \n    order_status_url\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(cancelled_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as cancelled_timestamp,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:18.918793Z", "completed_at": "2024-09-05T20:04:19.222304Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.222568Z", "completed_at": "2024-09-05T20:04:19.222575Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3286271095275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.003726Z", "completed_at": "2024-09-05T20:04:19.270309Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.270563Z", "completed_at": "2024-09-05T20:04:19.270570Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29416394233703613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allocation_limit\n    \n as \n    \n    allocation_limit\n    \n, \n    \n    \n    allocation_method\n    \n as \n    \n    allocation_method\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    customer_selection\n    \n as \n    \n    customer_selection\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    once_per_customer\n    \n as \n    \n    once_per_customer\n    \n, \n    \n    \n    prerequisite_quantity_range\n    \n as \n    \n    prerequisite_quantity_range\n    \n, \n    \n    \n    prerequisite_shipping_price_range\n    \n as \n    \n    prerequisite_shipping_price_range\n    \n, \n    \n    \n    prerequisite_subtotal_range\n    \n as \n    \n    prerequisite_subtotal_range\n    \n, \n    \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n, \n    \n    \n    quantity_ratio_entitled_quantity\n    \n as \n    \n    quantity_ratio_entitled_quantity\n    \n, \n    \n    \n    quantity_ratio_prerequisite_quantity\n    \n as \n    \n    quantity_ratio_prerequisite_quantity\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    target_selection\n    \n as \n    \n    target_selection\n    \n, \n    \n    \n    target_type\n    \n as \n    \n    target_type\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.180330Z", "completed_at": "2024-09-05T20:04:19.428784Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.429023Z", "completed_at": "2024-09-05T20:04:19.429029Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2749192714691162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    height\n    \n as \n    \n    height\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    src\n    \n as \n    \n    src\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    variant_ids\n    \n as \n    \n    variant_ids\n    \n, \n    \n    \n    width\n    \n as \n    \n    width\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.216951Z", "completed_at": "2024-09-05T20:04:19.466975Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.467201Z", "completed_at": "2024-09-05T20:04:19.467206Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27585315704345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.248342Z", "completed_at": "2024-09-05T20:04:19.512973Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.513207Z", "completed_at": "2024-09-05T20:04:19.513213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.29167890548706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.298465Z", "completed_at": "2024-09-05T20:04:19.561534Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.561769Z", "completed_at": "2024-09-05T20:04:19.561776Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2904701232910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    inventory_management\n    \n as \n    \n    inventory_management\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    old_inventory_quantity\n    \n as \n    \n    old_inventory_quantity\n    \n, \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    weight\n    \n as \n    \n    weight\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    option_1\n    \n as \n    \n    option_1\n    \n, \n    \n    \n    option_2\n    \n as \n    \n    option_2\n    \n, \n    \n    \n    option_3\n    \n as \n    \n    option_3\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.455698Z", "completed_at": "2024-09-05T20:04:19.806126Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.806839Z", "completed_at": "2024-09-05T20:04:19.806847Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.37941980361938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    total_duties_set\n    \n as \n    \n    total_duties_set\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.493263Z", "completed_at": "2024-09-05T20:04:19.807092Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.807870Z", "completed_at": "2024-09-05T20:04:19.807874Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34227490425109863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    checkout_api_supported\n    \n as \n    \n    checkout_api_supported\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cookie_consent_level\n    \n as \n    \n    cookie_consent_level\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    county_taxes\n    \n as \n    \n    county_taxes\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_email\n    \n as \n    \n    customer_email\n    \n, \n    \n    \n    domain\n    \n as \n    \n    domain\n    \n, \n    \n    \n    eligible_for_card_reader_giveaway\n    \n as \n    \n    eligible_for_card_reader_giveaway\n    \n, \n    \n    \n    eligible_for_payments\n    \n as \n    \n    eligible_for_payments\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    enabled_presentment_currencies\n    \n as \n    \n    enabled_presentment_currencies\n    \n, \n    \n    \n    google_apps_domain\n    \n as \n    \n    google_apps_domain\n    \n, \n    \n    \n    google_apps_login_enabled\n    \n as \n    \n    google_apps_login_enabled\n    \n, \n    \n    \n    has_discounts\n    \n as \n    \n    has_discounts\n    \n, \n    \n    \n    has_gift_cards\n    \n as \n    \n    has_gift_cards\n    \n, \n    \n    \n    has_storefront\n    \n as \n    \n    has_storefront\n    \n, \n    \n    \n    iana_timezone\n    \n as \n    \n    iana_timezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    money_format\n    \n as \n    \n    money_format\n    \n, \n    \n    \n    money_in_emails_format\n    \n as \n    \n    money_in_emails_format\n    \n, \n    \n    \n    money_with_currency_format\n    \n as \n    \n    money_with_currency_format\n    \n, \n    \n    \n    money_with_currency_in_emails_format\n    \n as \n    \n    money_with_currency_in_emails_format\n    \n, \n    \n    \n    myshopify_domain\n    \n as \n    \n    myshopify_domain\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    password_enabled\n    \n as \n    \n    password_enabled\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    plan_display_name\n    \n as \n    \n    plan_display_name\n    \n, \n    \n    \n    plan_name\n    \n as \n    \n    plan_name\n    \n, \n    \n    \n    pre_launch_enabled\n    \n as \n    \n    pre_launch_enabled\n    \n, \n    \n    \n    primary_locale\n    \n as \n    \n    primary_locale\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    requires_extra_payments_agreement\n    \n as \n    \n    requires_extra_payments_agreement\n    \n, \n    \n    \n    setup_required\n    \n as \n    \n    setup_required\n    \n, \n    \n    \n    shop_owner\n    \n as \n    \n    shop_owner\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    tax_shipping\n    \n as \n    \n    tax_shipping\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.540466Z", "completed_at": "2024-09-05T20:04:19.807626Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.808116Z", "completed_at": "2024-09-05T20:04:19.808119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2955348491668701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.844081Z", "completed_at": "2024-09-05T20:04:19.866001Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.866749Z", "completed_at": "2024-09-05T20:04:19.866752Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02987384796142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow\"\n    group by flow_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.853556Z", "completed_at": "2024-09-05T20:04:19.866544Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.867177Z", "completed_at": "2024-09-05T20:04:19.867181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030060768127441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow\"\nwhere flow_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.876340Z", "completed_at": "2024-09-05T20:04:19.879955Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.880266Z", "completed_at": "2024-09-05T20:04:19.880272Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011892080307006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign\"\n    group by campaign_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.869099Z", "completed_at": "2024-09-05T20:04:19.880682Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.881227Z", "completed_at": "2024-09-05T20:04:19.881233Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01308584213256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__event_attribution", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select \n        *,\n        -- no event will be attributed to both a campaign and flow\n        coalesce(campaign_id, flow_id) as touch_id,\n        case \n            when campaign_id is not null then 'campaign' \n            when flow_id is not null then 'flow' \n        else null end as touch_type -- defintion: touch = interaction with campaign/flow\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event\"\n\n    \n),\n\n-- sessionize events based on attribution eligibility -- is it the right kind of event, and does it have a campaign or flow?\ncreate_sessions as (\n    select\n        *,\n        -- default klaviyo__event_attribution_filter limits attribution-eligible events to to email opens, email clicks, and sms opens\n        -- https://help.klaviyo.com/hc/en-us/articles/115005248128\n\n        -- events that come with flow/campaign attributions (and are eligible event types) will create new sessions.\n        -- non-attributed events that come in afterward will be batched into the same attribution-session\n        sum(case when touch_id is not null\n        \n            and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n        \n            then 1 else 0 end) over (\n                partition by person_id, source_relation order by occurred_at asc rows between unbounded preceding and current row) as touch_session \n\n    from events\n\n),\n\n-- \"session start\" refers to the event in a \"touch session\" that is already attributed with a campaign or flow by Klaviyo\n-- a new event that is attributed with a campaign/flow will trigger a new session, so there will only be one already-attributed event per each session \n-- events that are missing attributions will borrow data from the event that triggered the session, if they are in the lookback window (see `attribute` CTE)\nlast_touches as (\n\n    select \n        *,\n        -- when did the touch session begin?\n        min(occurred_at) over(partition by person_id, source_relation, touch_session) as session_start_at,\n\n        -- get the kind of metric/event that triggered the attribution session, in order to decide \n        -- to use the sms or email lookback value. \n        first_value(type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row) as session_event_type\n\n    from create_sessions\n),\n\nattribute as (\n\n    select \n        *,\n        -- klaviyo uses different lookback windows for email and sms events\n        -- default email lookback = 5 days (120 hours) -> https://help.klaviyo.com/hc/en-us/articles/115005248128#conversion-tracking1\n        -- default sms lookback: 1 day (24 hours -> https://help.klaviyo.com/hc/en-us/articles/115005248128#sms-conversion-tracking7\n\n        coalesce(touch_id, -- use pre-attributed flow/campaign if provided\n            case \n            when \n        (\n        ((occurred_at)::date - (session_start_at)::date)\n     * 24 + date_part('hour', (occurred_at)::timestamp) - date_part('hour', (session_start_at)::timestamp))\n     <= (\n                case \n                when lower(session_event_type) like '%sms%' then 24\n                else 120 end\n            ) -- if the events fall within the lookback window, attribute\n            then first_value(touch_id) over (\n                partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)\n            else null end) as last_touch_id -- session qualified for attribution -> we will call this \"last touch\"\n\n    from last_touches \n),\n\nfinal as (\n\n    select\n        *,\n\n        -- get whether the event is attributed to a flow or campaign\n        coalesce(touch_type, first_value(touch_type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)) \n\n            as session_touch_type -- if the session events qualified for attribution, extract the type of touch they are attributed to\n\n    from attribute \n)\n\nselect * from final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__event_attribution\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.589545Z", "completed_at": "2024-09-05T20:04:19.865675Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.866289Z", "completed_at": "2024-09-05T20:04:19.866296Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3022310733795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    remote_reference\n    \n as \n    \n    remote_reference\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.882719Z", "completed_at": "2024-09-05T20:04:19.890936Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.891647Z", "completed_at": "2024-09-05T20:04:19.891655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010062932968139648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event\"\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.886673Z", "completed_at": "2024-09-05T20:04:19.892509Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.893517Z", "completed_at": "2024-09-05T20:04:19.893524Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011104106903076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.895146Z", "completed_at": "2024-09-05T20:04:19.905393Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.905711Z", "completed_at": "2024-09-05T20:04:19.905718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012671947479248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__event\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.898359Z", "completed_at": "2024-09-05T20:04:19.906371Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.907279Z", "completed_at": "2024-09-05T20:04:19.907286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013361930847167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metric_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric\"\n    group by metric_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.902517Z", "completed_at": "2024-09-05T20:04:19.907075Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.908001Z", "completed_at": "2024-09-05T20:04:19.908005Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010043144226074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric\"\nwhere metric_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.908839Z", "completed_at": "2024-09-05T20:04:19.913592Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.921588Z", "completed_at": "2024-09-05T20:04:19.921595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014962911605834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person\"\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.917867Z", "completed_at": "2024-09-05T20:04:19.922974Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.926544Z", "completed_at": "2024-09-05T20:04:19.926550Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013705968856811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code\"\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.913796Z", "completed_at": "2024-09-05T20:04:19.923169Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.927001Z", "completed_at": "2024-09-05T20:04:19.927012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014551162719726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person\"\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.923365Z", "completed_at": "2024-09-05T20:04:19.928415Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.929047Z", "completed_at": "2024-09-05T20:04:19.929051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006596803665161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.932605Z", "completed_at": "2024-09-05T20:04:19.939838Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.940400Z", "completed_at": "2024-09-05T20:04:19.940405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011842012405395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.937145Z", "completed_at": "2024-09-05T20:04:19.941255Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.941907Z", "completed_at": "2024-09-05T20:04:19.941911Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005717039108276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.946515Z", "completed_at": "2024-09-05T20:04:19.955189Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.955804Z", "completed_at": "2024-09-05T20:04:19.955808Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014194726943969727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line\"\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.950845Z", "completed_at": "2024-09-05T20:04:19.956174Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.956784Z", "completed_at": "2024-09-05T20:04:19.956787Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00692296028137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection\"\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.957100Z", "completed_at": "2024-09-05T20:04:19.963757Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.964213Z", "completed_at": "2024-09-05T20:04:19.964218Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008729934692382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.960842Z", "completed_at": "2024-09-05T20:04:19.967584Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.968126Z", "completed_at": "2024-09-05T20:04:19.968131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008373022079467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\"\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.964582Z", "completed_at": "2024-09-05T20:04:19.968887Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:19.972849Z", "completed_at": "2024-09-05T20:04:19.972854Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012293815612792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.969088Z", "completed_at": "2024-09-05T20:04:20.018476Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.022574Z", "completed_at": "2024-09-05T20:04:20.022581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05477309226989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.973737Z", "completed_at": "2024-09-05T20:04:20.026452Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.027006Z", "completed_at": "2024-09-05T20:04:20.027014Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05447793006896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.023637Z", "completed_at": "2024-09-05T20:04:20.027877Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.031166Z", "completed_at": "2024-09-05T20:04:20.031171Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009014129638671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.028076Z", "completed_at": "2024-09-05T20:04:20.043827Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.044603Z", "completed_at": "2024-09-05T20:04:20.044609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017961978912353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.045570Z", "completed_at": "2024-09-05T20:04:20.052232Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.052467Z", "completed_at": "2024-09-05T20:04:20.052472Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008437156677246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.048955Z", "completed_at": "2024-09-05T20:04:20.052950Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.053506Z", "completed_at": "2024-09-05T20:04:20.053510Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005112171173095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.054760Z", "completed_at": "2024-09-05T20:04:20.064818Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.065077Z", "completed_at": "2024-09-05T20:04:20.065082Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011306047439575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.057781Z", "completed_at": "2024-09-05T20:04:20.065684Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.066202Z", "completed_at": "2024-09-05T20:04:20.066206Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011718988418579102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.066958Z", "completed_at": "2024-09-05T20:04:20.073442Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.073942Z", "completed_at": "2024-09-05T20:04:20.073947Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008060932159423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.070421Z", "completed_at": "2024-09-05T20:04:20.074556Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.075063Z", "completed_at": "2024-09-05T20:04:20.075066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005184173583984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.076330Z", "completed_at": "2024-09-05T20:04:20.086078Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.086346Z", "completed_at": "2024-09-05T20:04:20.086352Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011026144027709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_event\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'attempted_delivery','delayed','delivered','failure','in_transit','out_for_delivery','ready_for_pickup','picked_up','label_printed','label_purchased','confirmed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.082980Z", "completed_at": "2024-09-05T20:04:20.087351Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.087773Z", "completed_at": "2024-09-05T20:04:20.087776Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011748790740966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_event_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment_event\"\n    group by fulfillment_event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.088111Z", "completed_at": "2024-09-05T20:04:20.094699Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.094971Z", "completed_at": "2024-09-05T20:04:20.094977Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00793600082397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item\"\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.092118Z", "completed_at": "2024-09-05T20:04:20.095625Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.096141Z", "completed_at": "2024-09-05T20:04:20.096144Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004525899887084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.096969Z", "completed_at": "2024-09-05T20:04:20.104987Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.105266Z", "completed_at": "2024-09-05T20:04:20.105274Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009529829025268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.100976Z", "completed_at": "2024-09-05T20:04:20.109450Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.109858Z", "completed_at": "2024-09-05T20:04:20.109864Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009910821914672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.106471Z", "completed_at": "2024-09-05T20:04:20.111077Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.125556Z", "completed_at": "2024-09-05T20:04:20.125566Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019642114639282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.125982Z", "completed_at": "2024-09-05T20:04:20.133310Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.133807Z", "completed_at": "2024-09-05T20:04:20.133811Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02328205108642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location\"\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.130460Z", "completed_at": "2024-09-05T20:04:20.134492Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.134977Z", "completed_at": "2024-09-05T20:04:20.134981Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0050201416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.135815Z", "completed_at": "2024-09-05T20:04:20.142380Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.142647Z", "completed_at": "2024-09-05T20:04:20.142654Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007993221282958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__metafield\"\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.139450Z", "completed_at": "2024-09-05T20:04:20.143308Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.143783Z", "completed_at": "2024-09-05T20:04:20.143787Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0048999786376953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__metafield\"\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.144580Z", "completed_at": "2024-09-05T20:04:20.152590Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.152976Z", "completed_at": "2024-09-05T20:04:20.152984Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009557962417602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_adjustment\"\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.149251Z", "completed_at": "2024-09-05T20:04:20.153701Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.154191Z", "completed_at": "2024-09-05T20:04:20.154195Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005530834197998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:19.837924Z", "completed_at": "2024-09-05T20:04:20.133098Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.133557Z", "completed_at": "2024-09-05T20:04:20.133562Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.325045108795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__transaction_tmp\"\n\n),\n\nfields as (\n\n    select\n\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    \n    \n        \n            \n            \"authorization\"\n            \n        \n    \n as authorization_code \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(authorization_expires_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as authorization_expires_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.155015Z", "completed_at": "2024-09-05T20:04:20.161441Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.162036Z", "completed_at": "2024-09-05T20:04:20.162039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008154153823852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.158523Z", "completed_at": "2024-09-05T20:04:20.162667Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.163465Z", "completed_at": "2024-09-05T20:04:20.163471Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0054967403411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.164676Z", "completed_at": "2024-09-05T20:04:20.175289Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.175560Z", "completed_at": "2024-09-05T20:04:20.175567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012406110763549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\"\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.169075Z", "completed_at": "2024-09-05T20:04:20.175976Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.176499Z", "completed_at": "2024-09-05T20:04:20.176503Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012740135192871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\"\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.172200Z", "completed_at": "2024-09-05T20:04:20.176829Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.177589Z", "completed_at": "2024-09-05T20:04:20.177592Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008821964263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute\"\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.178581Z", "completed_at": "2024-09-05T20:04:20.186346Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.190177Z", "completed_at": "2024-09-05T20:04:20.190183Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013180017471313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.182025Z", "completed_at": "2024-09-05T20:04:20.189894Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.190660Z", "completed_at": "2024-09-05T20:04:20.190664Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01260995864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_note_attribute\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.186675Z", "completed_at": "2024-09-05T20:04:20.191587Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.192315Z", "completed_at": "2024-09-05T20:04:20.192318Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010689020156860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line\"\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.193297Z", "completed_at": "2024-09-05T20:04:20.203900Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.204933Z", "completed_at": "2024-09-05T20:04:20.204938Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013199806213378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.200087Z", "completed_at": "2024-09-05T20:04:20.204643Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.205615Z", "completed_at": "2024-09-05T20:04:20.205621Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006428241729736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\"\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.207156Z", "completed_at": "2024-09-05T20:04:20.219138Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.219526Z", "completed_at": "2024-09-05T20:04:20.219534Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014264106750488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.212592Z", "completed_at": "2024-09-05T20:04:20.220491Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.221123Z", "completed_at": "2024-09-05T20:04:20.221127Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014369010925292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.215903Z", "completed_at": "2024-09-05T20:04:20.220693Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.221481Z", "completed_at": "2024-09-05T20:04:20.221485Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00989675521850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.221827Z", "completed_at": "2024-09-05T20:04:20.226172Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.230605Z", "completed_at": "2024-09-05T20:04:20.230611Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010437250137329102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.226595Z", "completed_at": "2024-09-05T20:04:20.234522Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.235128Z", "completed_at": "2024-09-05T20:04:20.235133Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009764909744262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.231009Z", "completed_at": "2024-09-05T20:04:20.234934Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.238620Z", "completed_at": "2024-09-05T20:04:20.238624Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012942075729370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.235482Z", "completed_at": "2024-09-05T20:04:20.240108Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.240721Z", "completed_at": "2024-09-05T20:04:20.240725Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006511688232421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag\"\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.241059Z", "completed_at": "2024-09-05T20:04:20.252193Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.252928Z", "completed_at": "2024-09-05T20:04:20.252933Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013357877731323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag\"\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.243845Z", "completed_at": "2024-09-05T20:04:20.252379Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.253308Z", "completed_at": "2024-09-05T20:04:20.253311Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013451099395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.248442Z", "completed_at": "2024-09-05T20:04:20.253641Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.254574Z", "completed_at": "2024-09-05T20:04:20.254577Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006731986999511719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\"\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.256238Z", "completed_at": "2024-09-05T20:04:20.266679Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.267131Z", "completed_at": "2024-09-05T20:04:20.267137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012271881103515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\"\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.259747Z", "completed_at": "2024-09-05T20:04:20.266896Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.267684Z", "completed_at": "2024-09-05T20:04:20.267687Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012568950653076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\"\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.263060Z", "completed_at": "2024-09-05T20:04:20.267493Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.268292Z", "completed_at": "2024-09-05T20:04:20.268295Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012314081192016602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\"\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.270185Z", "completed_at": "2024-09-05T20:04:20.279985Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.280567Z", "completed_at": "2024-09-05T20:04:20.280574Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011820077896118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__product_id__source_relation.ab95cde6f9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, product_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image\"\n    group by product_image_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.273656Z", "completed_at": "2024-09-05T20:04:20.280326Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.281114Z", "completed_at": "2024-09-05T20:04:20.281120Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011848211288452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image\"\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.276388Z", "completed_at": "2024-09-05T20:04:20.281528Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.282406Z", "completed_at": "2024-09-05T20:04:20.282411Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012697219848632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\"\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.289171Z", "completed_at": "2024-09-05T20:04:20.297118Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.297836Z", "completed_at": "2024-09-05T20:04:20.297847Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014883995056152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.284417Z", "completed_at": "2024-09-05T20:04:20.297536Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.298421Z", "completed_at": "2024-09-05T20:04:20.298425Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01569390296936035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.294048Z", "completed_at": "2024-09-05T20:04:20.298786Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.299738Z", "completed_at": "2024-09-05T20:04:20.299743Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01564502716064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.306889Z", "completed_at": "2024-09-05T20:04:20.315081Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.315979Z", "completed_at": "2024-09-05T20:04:20.315983Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015477895736694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\"\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.317107Z", "completed_at": "2024-09-05T20:04:20.325143Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.328675Z", "completed_at": "2024-09-05T20:04:20.328684Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013331890106201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.032069Z", "completed_at": "2024-09-05T20:04:20.298997Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.300112Z", "completed_at": "2024-09-05T20:04:20.300115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2990150451660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\"\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    string_agg(distinct cast(customers.customer_id as TEXT), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(customers.phone as TEXT), ', ')\n\n as phone_numbers,\n        \n    string_agg(distinct cast(customer_tags.value as TEXT), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    bool_or( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    bool_or( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_shopify__customer_email_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.321866Z", "completed_at": "2024-09-05T20:04:20.329587Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.330726Z", "completed_at": "2024-09-05T20:04:20.330731Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010036945343017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop\"\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.325597Z", "completed_at": "2024-09-05T20:04:20.331075Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.332083Z", "completed_at": "2024-09-05T20:04:20.332086Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011033058166503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.332635Z", "completed_at": "2024-09-05T20:04:20.343802Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.358945Z", "completed_at": "2024-09-05T20:04:20.358952Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028630971908569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line\"\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.354904Z", "completed_at": "2024-09-05T20:04:20.366807Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.367317Z", "completed_at": "2024-09-05T20:04:20.367323Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03055405616760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__event_attribution\"\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.359599Z", "completed_at": "2024-09-05T20:04:20.367069Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.367727Z", "completed_at": "2024-09-05T20:04:20.367731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029968976974487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__event_attribution\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.363433Z", "completed_at": "2024-09-05T20:04:20.368339Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.369034Z", "completed_at": "2024-09-05T20:04:20.369037Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006277799606323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.370224Z", "completed_at": "2024-09-05T20:04:20.385719Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.385973Z", "completed_at": "2024-09-05T20:04:20.385979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017245054244995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.373248Z", "completed_at": "2024-09-05T20:04:20.390574Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.391165Z", "completed_at": "2024-09-05T20:04:20.391173Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021895885467529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.378571Z", "completed_at": "2024-09-05T20:04:20.390859Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.391617Z", "completed_at": "2024-09-05T20:04:20.391621Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01874709129333496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transactions_unique_id\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__transaction\"\n\n    \n\n), tender_transactions as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tender_transaction\"\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.387097Z", "completed_at": "2024-09-05T20:04:20.392056Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.392933Z", "completed_at": "2024-09-05T20:04:20.392937Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006401777267456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.394634Z", "completed_at": "2024-09-05T20:04:20.417485Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.417955Z", "completed_at": "2024-09-05T20:04:20.417962Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02474498748779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.408066Z", "completed_at": "2024-09-05T20:04:20.417694Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.418386Z", "completed_at": "2024-09-05T20:04:20.418389Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02489781379699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.413510Z", "completed_at": "2024-09-05T20:04:20.418712Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.419580Z", "completed_at": "2024-09-05T20:04:20.419584Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02532505989074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.438473Z", "completed_at": "2024-09-05T20:04:20.509897Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.510111Z", "completed_at": "2024-09-05T20:04:20.510117Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08986616134643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as order_lines_unique_key\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\"\n\n    \n\n), product_variants as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\"\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    string_agg(distinct cast(refunds.restock_type as TEXT), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__tax_line\"\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.506537Z", "completed_at": "2024-09-05T20:04:20.515061Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.515639Z", "completed_at": "2024-09-05T20:04:20.515643Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09445595741271973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_shopify__customer_email_rollup\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.511405Z", "completed_at": "2024-09-05T20:04:20.516005Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.516652Z", "completed_at": "2024-09-05T20:04:20.516655Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005999088287353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\nwhere transactions_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.516983Z", "completed_at": "2024-09-05T20:04:20.526359Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.526850Z", "completed_at": "2024-09-05T20:04:20.526856Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011534690856933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transactions_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\nwhere transactions_unique_id is not null\ngroup by transactions_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.568787Z", "completed_at": "2024-09-05T20:04:20.575377Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.576056Z", "completed_at": "2024-09-05T20:04:20.576063Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04318714141845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.533922Z", "completed_at": "2024-09-05T20:04:20.575604Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.576632Z", "completed_at": "2024-09-05T20:04:20.576635Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0442957878112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as orders_unique_key\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n\n    \n\n), order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n\n), order_adjustments as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_adjustment\"\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_tags\n    \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_tag\"\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_url_tags\n    \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_url_tag\"\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    string_agg(distinct cast(service as TEXT), ', ')\n\n as fulfillment_services,\n        \n    string_agg(distinct cast(tracking_company as TEXT), ', ')\n\n as tracking_companies,\n        \n    string_agg(distinct cast(tracking_number as TEXT), ', ')\n\n as tracking_numbers\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  total_shipping_price_set::json #>> '{shop_money,amount}'\n\n as float) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.572296Z", "completed_at": "2024-09-05T20:04:20.576416Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.577254Z", "completed_at": "2024-09-05T20:04:20.577257Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030749797821044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\nwhere order_lines_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.579354Z", "completed_at": "2024-09-05T20:04:20.612425Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.615721Z", "completed_at": "2024-09-05T20:04:20.615727Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03788113594055176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_lines_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\nwhere order_lines_unique_key is not null\ngroup by order_lines_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.608051Z", "completed_at": "2024-09-05T20:04:20.615274Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.616170Z", "completed_at": "2024-09-05T20:04:20.616174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03743577003479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.582125Z", "completed_at": "2024-09-05T20:04:20.615504Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.616540Z", "completed_at": "2024-09-05T20:04:20.616542Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03819417953491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_level\"\n), \n\ninventory_item as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__inventory_item\"\n),\n\nlocation as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__location\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\"\n),\n\nproduct as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product\"\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__inventory_levels\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.624779Z", "completed_at": "2024-09-05T20:04:20.634445Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.634799Z", "completed_at": "2024-09-05T20:04:20.634806Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016504764556884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.635911Z", "completed_at": "2024-09-05T20:04:20.639937Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.640159Z", "completed_at": "2024-09-05T20:04:20.640163Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0047588348388671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.338051Z", "completed_at": "2024-09-05T20:04:20.617113Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.618148Z", "completed_at": "2024-09-05T20:04:20.618152Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31249213218688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__events", "compiled": true, "compiled_code": "\n-- ^ the incremental strategy is split into delete+insert for snowflake since there is a bit of\n-- overlap in transformed data blocks for incremental runs (we look back an extra hour, see lines 23 - 30)\n-- this configuration solution was taken from https://docs.getdbt.com/reference/resource-configs/snowflake-configs#merge-behavior-incremental-models\n\nwith events as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__event_attribution\"\n\n    \n),\n\nevent_fields as (\n\n    -- excluding some fields to rename them and/or make them null if needed\n    \n    -- as of the patch release of dbt-utils v0.7.3, the snowflake uppercasing is not needed anymore so we have deleted the snowflake conditional in the exclusion\n\n    select \n        \"variation_id\",\n  \"campaign_id\",\n  \"occurred_at\",\n  \"flow_id\",\n  \"flow_message_id\",\n  \"event_id\",\n  \"metric_id\",\n  \"person_id\",\n  \"uuid\",\n  \"numeric_value\",\n  \"_fivetran_synced\",\n  \"source_relation\",\n  \"occurred_on\",\n  \"unique_event_id\",\n  \"touch_id\",\n  \"touch_type\",\n\n        type, -- need to pull this out because it gets removed by dbt_utils.star, due to being a substring of 'session_event_type' and 'session_touch_type'\n\n        -- split out campaign and flow IDs\n        case \n            when session_touch_type = 'campaign' then last_touch_id \n        else null end as last_touch_campaign_id,\n        case \n            when session_touch_type = 'flow' then last_touch_id \n        else null end as last_touch_flow_id,\n\n        -- only make these non-null if the event indeed qualified for attribution\n        case \n            when last_touch_id is not null then session_start_at \n        else null end as last_touch_at,\n        case \n            when last_touch_id is not null then session_event_type \n        else null end as last_touch_event_type,\n        case \n            when last_touch_id is not null then session_touch_type \n        else null end as last_touch_type -- flow vs campaign\n\n    \n    from events\n),\n\ncampaign as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign\"\n),\n\nflow as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow\"\n),\n\nperson as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person\"\n),\n\n-- just pulling this to join with INTEGRATION\nmetric as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__metric\"\n),\n\njoin_fields as (\n\n    select\n        event_fields.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.subject as campaign_subject_line,\n        flow.flow_name, \n        person.city as person_city,\n        person.country as person_country,\n        person.region as person_region,\n        person.email as person_email,\n        person.timezone as person_timezone,\n        metric.integration_id,\n        metric.integration_name,\n        metric.integration_category\n\n    from event_fields\n    left join campaign on (\n      event_fields.last_touch_campaign_id = campaign.campaign_id\n      and\n      event_fields.source_relation = campaign.source_relation\n    )\n    left join flow on (\n      event_fields.last_touch_flow_id = flow.flow_id\n      and\n      event_fields.source_relation = flow.source_relation  \n    )\n    left join person on (\n      event_fields.person_id = person.person_id\n      and\n      event_fields.source_relation = person.source_relation\n    )\n    left join metric on (\n      event_fields.metric_id = metric.metric_id\n      and\n      event_fields.source_relation = metric.source_relation\n    )\n)\n\nselect * from join_fields", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.653911Z", "completed_at": "2024-09-05T20:04:20.659423Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.659670Z", "completed_at": "2024-09-05T20:04:20.659675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0077550411224365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\nwhere orders_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.656785Z", "completed_at": "2024-09-05T20:04:20.660320Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.660756Z", "completed_at": "2024-09-05T20:04:20.660760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008103132247924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    orders_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\nwhere orders_unique_key is not null\ngroup by orders_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.661523Z", "completed_at": "2024-09-05T20:04:20.667532Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.667799Z", "completed_at": "2024-09-05T20:04:20.667803Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007345914840698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__inventory_levels\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.664913Z", "completed_at": "2024-09-05T20:04:20.668847Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.672887Z", "completed_at": "2024-09-05T20:04:20.672894Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008608102798461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__inventory_levels\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.669046Z", "completed_at": "2024-09-05T20:04:20.674063Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.695732Z", "completed_at": "2024-09-05T20:04:20.695739Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027409791946411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__inventory_levels\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.674253Z", "completed_at": "2024-09-05T20:04:20.703717Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.703944Z", "completed_at": "2024-09-05T20:04:20.703949Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03035902976989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n), shop as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__shop\"\n),\n\ncalendar as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__calendar\"\n    where cast(date_trunc('day', date_day) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\n\nshop_calendar as (\n\n    select\n        cast(date_trunc('day', calendar.date_day) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__daily_shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.697013Z", "completed_at": "2024-09-05T20:04:20.710802Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.711085Z", "completed_at": "2024-09-05T20:04:20.711090Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014584064483642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__person_campaign_flow", "compiled": true, "compiled_code": "with events as (\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\"\n),\n\npivot_out_events as (\n    \n    select \n        person_id,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom pivot_out_events", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__person_campaign_flow\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.705064Z", "completed_at": "2024-09-05T20:04:20.711741Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.712245Z", "completed_at": "2024-09-05T20:04:20.712248Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007651090621948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__daily_klaviyo_user_metrics", "compiled": true, "compiled_code": "with events as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\"\n\n), pivot_out_events as (\n    \n    select \n        cast( date_trunc('day', occurred_at) as date) as date_day,\n        person_email as email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        campaign_subject_line,\n        campaign_type,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    case\n        when replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast(numeric_value as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::numeric\n\n\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\n-- the grain will be person-flow-campaign-variation-day\nselect *\nfrom pivot_out_events", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__daily_klaviyo_user_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.716604Z", "completed_at": "2024-09-05T20:04:20.719517Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.719937Z", "completed_at": "2024-09-05T20:04:20.719942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003969907760620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.713017Z", "completed_at": "2024-09-05T20:04:20.719715Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.720308Z", "completed_at": "2024-09-05T20:04:20.720311Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008362054824829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\"\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.730040Z", "completed_at": "2024-09-05T20:04:20.749398Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.749631Z", "completed_at": "2024-09-05T20:04:20.749639Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028432130813598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as discounts_unique_key\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__discount_code\"\n\n    \n),\n\nprice_rule as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__price_rule\"\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.751170Z", "completed_at": "2024-09-05T20:04:20.756300Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.756524Z", "completed_at": "2024-09-05T20:04:20.756529Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006134033203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.757598Z", "completed_at": "2024-09-05T20:04:20.764280Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.764504Z", "completed_at": "2024-09-05T20:04:20.764509Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007426023483276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.765616Z", "completed_at": "2024-09-05T20:04:20.769802Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.770016Z", "completed_at": "2024-09-05T20:04:20.770021Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004882335662841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.771196Z", "completed_at": "2024-09-05T20:04:20.774312Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.774534Z", "completed_at": "2024-09-05T20:04:20.774540Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003958940505981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__daily_shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.619475Z", "completed_at": "2024-09-05T20:04:20.884545Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.884774Z", "completed_at": "2024-09-05T20:04:20.884781Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.29464197158813477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        \"email\",\n  \"source_relation\",\n  \"customer_ids\",\n  \"phone_numbers\",\n  \"customer_tags\",\n  \"first_account_created_at\",\n  \"last_account_created_at\",\n  \"last_updated_at\",\n  \"marketing_consent_updated_at\",\n  \"last_fivetran_synced\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"account_state\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\"\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_shopify__customer_email_rollup\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_emails\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.628468Z", "completed_at": "2024-09-05T20:04:20.918864Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.919414Z", "completed_at": "2024-09-05T20:04:20.919420Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3251457214355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        \"customer_id\",\n  \"email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"phone\",\n  \"account_state\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\",\n  \"marketing_consent_updated_at\",\n  \"created_timestamp\",\n  \"updated_timestamp\",\n  \"_fivetran_synced\",\n  \"source_relation\"\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__customer\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_shopify__abandoned_checkout\"\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.944972Z", "completed_at": "2024-09-05T20:04:20.950002Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.950228Z", "completed_at": "2024-09-05T20:04:20.950233Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005924224853515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__person_campaign_flow\"\n    group by person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.951453Z", "completed_at": "2024-09-05T20:04:20.954491Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.954705Z", "completed_at": "2024-09-05T20:04:20.954710Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003916025161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__discounts\"\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.955727Z", "completed_at": "2024-09-05T20:04:20.958804Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.959018Z", "completed_at": "2024-09-05T20:04:20.959023Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003773927688598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__discounts\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.960018Z", "completed_at": "2024-09-05T20:04:20.963467Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.963736Z", "completed_at": "2024-09-05T20:04:20.963741Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004186153411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__discounts\"\nwhere discounts_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.964779Z", "completed_at": "2024-09-05T20:04:20.968445Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.968659Z", "completed_at": "2024-09-05T20:04:20.968663Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004355669021606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discounts_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__discounts\"\nwhere discounts_unique_key is not null\ngroup by discounts_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.969656Z", "completed_at": "2024-09-05T20:04:20.972554Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.972749Z", "completed_at": "2024-09-05T20:04:20.972753Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035698413848876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__products\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.973703Z", "completed_at": "2024-09-05T20:04:20.982880Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.983105Z", "completed_at": "2024-09-05T20:04:20.983111Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009862899780273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_emails\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), final as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_email_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.984302Z", "completed_at": "2024-09-05T20:04:20.987757Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.987972Z", "completed_at": "2024-09-05T20:04:20.987976Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004221916198730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_emails\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.988959Z", "completed_at": "2024-09-05T20:04:20.997356Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:20.997586Z", "completed_at": "2024-09-05T20:04:20.997591Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009093284606933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customers\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(date_trunc('month', first_order_timestamp) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), final as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(customer_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.998684Z", "completed_at": "2024-09-05T20:04:21.001715Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.001931Z", "completed_at": "2024-09-05T20:04:21.001936Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003718852996826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customers\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.002915Z", "completed_at": "2024-09-05T20:04:21.005682Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.005881Z", "completed_at": "2024-09-05T20:04:21.005885Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0034177303314208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.006856Z", "completed_at": "2024-09-05T20:04:21.014318Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.014647Z", "completed_at": "2024-09-05T20:04:21.014654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008287906646728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.016298Z", "completed_at": "2024-09-05T20:04:21.019637Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.019855Z", "completed_at": "2024-09-05T20:04:21.019859Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004096031188964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.020880Z", "completed_at": "2024-09-05T20:04:21.025088Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.025333Z", "completed_at": "2024-09-05T20:04:21.025337Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004925966262817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.722002Z", "completed_at": "2024-09-05T20:04:21.015068Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.015593Z", "completed_at": "2024-09-05T20:04:21.015596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31969714164733887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__orders_attribution", "compiled": true, "compiled_code": "\n\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__orders\"\n\n    -- just grab new + newly updated orders\n    \n\n), events as (\n\n    select \n        *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__events\"\n\n    where \n        coalesce(last_touch_campaign_id, last_touch_flow_id) is not null\n    \n        and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n    \n\n    -- only grab the events for users who are in the new increment of orders\n    \n\n), join_orders_w_events as (\n\n    select \n        orders.*,\n        events.last_touch_campaign_id,\n        events.last_touch_flow_id,\n        events.variation_id as last_touch_variation_id,\n        events.campaign_name as last_touch_campaign_name,\n        events.campaign_subject_line as last_touch_campaign_subject_line,\n        events.flow_name as last_touch_flow_name,\n        events.campaign_type as last_touch_campaign_type,\n        events.event_id as last_touch_event_id,\n        events.occurred_at as last_touch_event_occurred_at,\n        events.type as last_touch_event_type,\n        events.integration_id as last_touch_integration_id,\n        events.integration_name as last_touch_integration_name,\n        events.integration_category as last_touch_integration_category,\n        events.source_relation as klaviyo_source_relation\n\n    from orders \n    left join events on \n        lower(orders.email) = lower(events.person_email)\n        and \n        (\n        ((orders.created_timestamp)::date - (events.occurred_at)::date)\n     * 24 + date_part('hour', (orders.created_timestamp)::timestamp) - date_part('hour', (events.occurred_at)::timestamp))\n     <= (\n            case when events.type like '%sms%' then 24\n            else 120 end)\n        and orders.created_timestamp > events.occurred_at\n\n), order_events as (\n\n    select\n        *,\n        row_number() over (partition by order_id order by last_touch_event_occurred_at desc) as event_index,\n\n        -- the order was made after X interactions with campaign/flow\n        count(last_touch_event_id) over (partition by order_id, last_touch_campaign_id) as count_interactions_with_campaign,\n        count(last_touch_event_id) over (partition by order_id, last_touch_flow_id) as count_interactions_with_flow\n\n\n    from join_orders_w_events\n\n), last_touches as (\n\n    select \n        \"order_id\",\n  \"user_id\",\n  \"total_discounts\",\n  \"total_discounts_set\",\n  \"total_line_items_price\",\n  \"total_line_items_price_set\",\n  \"total_price\",\n  \"total_price_set\",\n  \"total_tax_set\",\n  \"total_tax\",\n  \"source_name\",\n  \"subtotal_price\",\n  \"has_taxes_included\",\n  \"total_weight\",\n  \"total_tip_received\",\n  \"landing_site_base_url\",\n  \"location_id\",\n  \"name\",\n  \"note\",\n  \"number\",\n  \"order_number\",\n  \"cancel_reason\",\n  \"cart_token\",\n  \"checkout_token\",\n  \"created_timestamp\",\n  \"cancelled_timestamp\",\n  \"closed_timestamp\",\n  \"processed_timestamp\",\n  \"updated_timestamp\",\n  \"currency\",\n  \"customer_id\",\n  \"email\",\n  \"financial_status\",\n  \"fulfillment_status\",\n  \"referring_site\",\n  \"billing_address_address_1\",\n  \"billing_address_address_2\",\n  \"billing_address_city\",\n  \"billing_address_company\",\n  \"billing_address_country\",\n  \"billing_address_country_code\",\n  \"billing_address_first_name\",\n  \"billing_address_last_name\",\n  \"billing_address_latitude\",\n  \"billing_address_longitude\",\n  \"billing_address_name\",\n  \"billing_address_phone\",\n  \"billing_address_province\",\n  \"billing_address_province_code\",\n  \"billing_address_zip\",\n  \"browser_ip\",\n  \"total_shipping_price_set\",\n  \"shipping_address_address_1\",\n  \"shipping_address_address_2\",\n  \"shipping_address_city\",\n  \"shipping_address_company\",\n  \"shipping_address_country\",\n  \"shipping_address_country_code\",\n  \"shipping_address_first_name\",\n  \"shipping_address_last_name\",\n  \"shipping_address_latitude\",\n  \"shipping_address_longitude\",\n  \"shipping_address_name\",\n  \"shipping_address_phone\",\n  \"shipping_address_province\",\n  \"shipping_address_province_code\",\n  \"shipping_address_zip\",\n  \"token\",\n  \"app_id\",\n  \"checkout_id\",\n  \"client_details_user_agent\",\n  \"customer_locale\",\n  \"order_status_url\",\n  \"presentment_currency\",\n  \"is_test_order\",\n  \"is_deleted\",\n  \"has_buyer_accepted_marketing\",\n  \"is_confirmed\",\n  \"_fivetran_synced\",\n  \"orders_unique_key\",\n  \"shipping_cost\",\n  \"order_adjustment_amount\",\n  \"order_adjustment_tax_amount\",\n  \"refund_subtotal\",\n  \"refund_total_tax\",\n  \"order_adjusted_total\",\n  \"line_item_count\",\n  \"shipping_discount_amount\",\n  \"percentage_calc_discount_amount\",\n  \"fixed_amount_discount_amount\",\n  \"count_discount_codes_applied\",\n  \"order_total_shipping_tax\",\n  \"order_tags\",\n  \"order_url_tags\",\n  \"number_of_fulfillments\",\n  \"fulfillment_services\",\n  \"tracking_companies\",\n  \"tracking_numbers\",\n  \"customer_order_seq_number\",\n  \"new_vs_repeat\",\n        last_touch_campaign_id is not null or last_touch_flow_id is not null as is_attributed,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_variation_id,\n        last_touch_campaign_name,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        last_touch_flow_name,\n        case when last_touch_campaign_id is not null then count_interactions_with_campaign else null end as count_interactions_with_campaign, -- will be null if it's associated with a flow\n        count_interactions_with_flow, -- will be null if it's associated with a campaign\n        last_touch_event_id,\n        last_touch_event_occurred_at,\n        last_touch_event_type,\n        last_touch_integration_name,\n        last_touch_integration_category,\n        source_relation as shopify_source_relation,\n        klaviyo_source_relation,\n        md5(cast(coalesce(cast(order_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_order_key\n\n    from order_events\n    where event_index = 1\n)\n\nselect *\nfrom last_touches", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__orders_attribution\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.775589Z", "completed_at": "2024-09-05T20:04:21.025670Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.025962Z", "completed_at": "2024-09-05T20:04:21.025966Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2766909599304199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__campaign_flow_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__person_campaign_flow\"\n),\n\n-- aggregating to the campaign/flow - variation level. so a flow with A/B versions will have 2 rows\nagg_metrics as (\n\n    select\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        variation_id,\n        source_relation,\n        count(distinct person_id) as total_count_unique_people,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_refunded_order ) as sum_revenue_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_placed_order ) as sum_revenue_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_ordered_product ) as sum_revenue_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_checkout_started ) as sum_revenue_checkout_started\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_cancelled_order ) as sum_revenue_cancelled_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_active_on_site ) as count_active_on_site\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_active_on_site > 0 then 1 else 0 end) as unique_count_active_on_site\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_viewed_product ) as count_viewed_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_viewed_product > 0 then 1 else 0 end) as unique_count_viewed_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_ordered_product ) as count_ordered_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_ordered_product > 0 then 1 else 0 end) as unique_count_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_placed_order ) as count_placed_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_placed_order > 0 then 1 else 0 end) as unique_count_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_refunded_order ) as count_refunded_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_refunded_order > 0 then 1 else 0 end) as unique_count_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_email ) as count_received_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_email > 0 then 1 else 0 end) as unique_count_received_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_email ) as count_clicked_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_email > 0 then 1 else 0 end) as unique_count_clicked_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_opened_email ) as count_opened_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_opened_email > 0 then 1 else 0 end) as unique_count_opened_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_marked_email_as_spam ) as count_marked_email_as_spam\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_marked_email_as_spam > 0 then 1 else 0 end) as unique_count_marked_email_as_spam\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed ) as count_unsubscribed\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed > 0 then 1 else 0 end) as unique_count_unsubscribed\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_sms ) as count_received_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_sms > 0 then 1 else 0 end) as unique_count_received_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_sms ) as count_clicked_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_sms > 0 then 1 else 0 end) as unique_count_clicked_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_sent_sms ) as count_sent_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_sent_sms > 0 then 1 else 0 end) as unique_count_sent_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed_from_sms ) as count_unsubscribed_from_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed_from_sms > 0 then 1 else 0 end) as unique_count_unsubscribed_from_sms\n\n        \n        from person_campaign_flow\n    group by 1,2,3,4\n)\n\nselect * from agg_metrics", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__campaign_flow_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.041971Z", "completed_at": "2024-09-05T20:04:21.051593Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.052180Z", "completed_at": "2024-09-05T20:04:21.052184Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010684013366699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__daily_shopify_customer_orders", "compiled": true, "compiled_code": "with orders as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__orders_attribution\"\n\n), order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__order_lines\"\n\n), order_line_metrics as (\n\n    select \n        order_id,\n        source_relation,\n        count(distinct product_id) as count_products,\n        count(distinct product_id || '-' || variant_id) as count_product_variants,\n        sum(quantity) as sum_quantity\n        \n    from order_lines\n    group by 1,2\n\n), join_orders as (\n\n    select \n        orders.*,\n        order_line_metrics.count_products,\n        order_line_metrics.count_product_variants,\n        order_line_metrics.sum_quantity\n\n    from orders \n    left join order_line_metrics\n        on orders.order_id = order_line_metrics.order_id\n        and orders.shopify_source_relation = order_line_metrics.source_relation\n\n), daily_order_metrics as (\n\n    select\n        cast( date_trunc('day', created_timestamp) as date) as date_day,\n        email,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        last_touch_campaign_name,\n        last_touch_flow_name,\n        last_touch_variation_id,\n        last_touch_campaign_subject_line,\n        last_touch_campaign_type,\n        shopify_source_relation as source_relation,\n\n        count(distinct order_id) as total_orders,\n        sum(order_adjusted_total) as total_price,\n\n        sum(line_item_count) as count_line_items,\n        sum(total_line_items_price) as total_line_items_price,\n        \n\n        sum(total_discounts) as total_discounts,\n        sum(total_tax) as total_tax,\n        sum(shipping_cost) as total_shipping_cost,\n\n        \n        sum(refund_subtotal) as total_refund_subtotal,\n        sum(refund_total_tax) as total_refund_tax,\n        \n\n        sum(case when cancelled_timestamp is not null then 1 else 0 end) as count_cancelled_orders,\n        sum(count_products) as count_products,\n        sum(count_product_variants) as count_product_variants,\n        sum(sum_quantity) as sum_quantity\n\n        \n        , sum(order_adjustment_amount) as total_order_adjustment_amount\n        , sum(order_adjustment_tax_amount) as total_order_adjustment_tax_amount\n        \n        \n\n    from join_orders\n    group by 1,2,3,4,5,6,7,8,9,10\n)\n\nselect *\nfrom daily_order_metrics", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__daily_shopify_customer_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.047228Z", "completed_at": "2024-09-05T20:04:21.052495Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.053317Z", "completed_at": "2024-09-05T20:04:21.053320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006582975387573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__orders_attribution_order_id__shopify_source_relation.0eb46743bb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, shopify_source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__orders_attribution\"\n    group by order_id, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.065506Z", "completed_at": "2024-09-05T20:04:21.114685Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.114902Z", "completed_at": "2024-09-05T20:04:21.114908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0603177547454834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__campaign_flow_metrics\"\n    group by variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:20.913549Z", "completed_at": "2024-09-05T20:04:21.204546Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.204766Z", "completed_at": "2024-09-05T20:04:21.204773Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.31433773040771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__person_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__person_campaign_flow\"\n),\n\nagg_metrics as (\n\n    select\n        person_id,\n        source_relation,\n        count(distinct last_touch_campaign_id) as count_total_campaigns,\n        count(distinct last_touch_flow_id) as count_total_flows,\n        min(first_event_at) as first_event_at, -- first ever event occurred at\n        max(last_event_at) as last_event_at, -- last ever event occurred at\n        min(distinct case when last_touch_campaign_id is not null then first_event_at end) as first_campaign_touch_at,\n        max(distinct case when last_touch_campaign_id is not null then last_event_at end) as last_campaign_touch_at,\n        min(distinct case when last_touch_flow_id is not null then first_event_at end) as first_flow_touch_at,\n        max(distinct case when last_touch_flow_id is not null then last_event_at end) as last_flow_touch_at\n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_refunded_order ) as total_sum_revenue_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_refunded_order else 0 end ) as organic_sum_revenue_refunded_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_placed_order ) as total_sum_revenue_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_placed_order else 0 end ) as organic_sum_revenue_placed_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_ordered_product ) as total_sum_revenue_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_ordered_product else 0 end ) as organic_sum_revenue_ordered_product\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_checkout_started ) as total_sum_revenue_checkout_started\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_checkout_started else 0 end ) as organic_sum_revenue_checkout_started\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_cancelled_order ) as total_sum_revenue_cancelled_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_cancelled_order else 0 end ) as organic_sum_revenue_cancelled_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_active_on_site ) as total_count_active_on_site\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_viewed_product ) as total_count_viewed_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_ordered_product ) as total_count_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_placed_order ) as total_count_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_refunded_order ) as total_count_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_email ) as total_count_received_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_email ) as total_count_clicked_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_opened_email ) as total_count_opened_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_marked_email_as_spam ) as total_count_marked_email_as_spam\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed ) as total_count_unsubscribed\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_sms ) as total_count_received_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_sms ) as total_count_clicked_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_sent_sms ) as total_count_sent_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed_from_sms ) as total_count_unsubscribed_from_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        from person_campaign_flow\n    group by 1,2\n\n)\n\nselect * from agg_metrics", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__person_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.115913Z", "completed_at": "2024-09-05T20:04:21.428915Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.429393Z", "completed_at": "2024-09-05T20:04:21.429396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.33856892585754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__daily_customer_metrics", "compiled": true, "compiled_code": "with shopify_daily as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__daily_shopify_customer_orders\"\n\n), klaviyo_daily as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__daily_klaviyo_user_metrics\"\n\n), combine_histories as (\n\n    select \n        coalesce(shopify_daily.date_day, klaviyo_daily.date_day) as date_day,\n        coalesce(shopify_daily.email, klaviyo_daily.email) as email,\n\n        -- when the below is null, these are unattributed actions\n        coalesce(shopify_daily.last_touch_campaign_id, klaviyo_daily.last_touch_campaign_id) as campaign_id,\n        coalesce(shopify_daily.last_touch_flow_id, klaviyo_daily.last_touch_flow_id) as flow_id,\n        coalesce(shopify_daily.last_touch_campaign_name, klaviyo_daily.campaign_name) as campaign_name,\n        coalesce(shopify_daily.last_touch_flow_name, klaviyo_daily.flow_name) as flow_name,\n        coalesce(shopify_daily.last_touch_variation_id, klaviyo_daily.variation_id) as variation_id,\n        coalesce(shopify_daily.last_touch_campaign_subject_line, klaviyo_daily.campaign_subject_line) as campaign_subject_line,\n        coalesce(shopify_daily.last_touch_campaign_type, klaviyo_daily.campaign_type) as campaign_type,\n        \n        shopify_daily.\"total_orders\" as \"shopify_total_orders\",\n  shopify_daily.\"total_price\" as \"shopify_total_price\",\n  shopify_daily.\"count_line_items\" as \"shopify_count_line_items\",\n  shopify_daily.\"total_line_items_price\" as \"shopify_total_line_items_price\",\n  shopify_daily.\"total_discounts\" as \"shopify_total_discounts\",\n  shopify_daily.\"total_tax\" as \"shopify_total_tax\",\n  shopify_daily.\"total_shipping_cost\" as \"shopify_total_shipping_cost\",\n  shopify_daily.\"total_refund_subtotal\" as \"shopify_total_refund_subtotal\",\n  shopify_daily.\"total_refund_tax\" as \"shopify_total_refund_tax\",\n  shopify_daily.\"count_cancelled_orders\" as \"shopify_count_cancelled_orders\",\n  shopify_daily.\"count_products\" as \"shopify_count_products\",\n  shopify_daily.\"count_product_variants\" as \"shopify_count_product_variants\",\n  shopify_daily.\"sum_quantity\" as \"shopify_sum_quantity\",\n  shopify_daily.\"total_order_adjustment_amount\" as \"shopify_total_order_adjustment_amount\",\n  shopify_daily.\"total_order_adjustment_tax_amount\" as \"shopify_total_order_adjustment_tax_amount\",\n        shopify_daily.source_relation as shopify_source_relation,\n\n        klaviyo_daily.\"first_event_at\" as \"klaviyo_first_event_at\",\n  klaviyo_daily.\"last_event_at\" as \"klaviyo_last_event_at\",\n  klaviyo_daily.\"sum_revenue_refunded_order\" as \"klaviyo_sum_revenue_refunded_order\",\n  klaviyo_daily.\"sum_revenue_placed_order\" as \"klaviyo_sum_revenue_placed_order\",\n  klaviyo_daily.\"sum_revenue_ordered_product\" as \"klaviyo_sum_revenue_ordered_product\",\n  klaviyo_daily.\"sum_revenue_checkout_started\" as \"klaviyo_sum_revenue_checkout_started\",\n  klaviyo_daily.\"sum_revenue_cancelled_order\" as \"klaviyo_sum_revenue_cancelled_order\",\n  klaviyo_daily.\"count_active_on_site\" as \"klaviyo_count_active_on_site\",\n  klaviyo_daily.\"count_viewed_product\" as \"klaviyo_count_viewed_product\",\n  klaviyo_daily.\"count_ordered_product\" as \"klaviyo_count_ordered_product\",\n  klaviyo_daily.\"count_placed_order\" as \"klaviyo_count_placed_order\",\n  klaviyo_daily.\"count_refunded_order\" as \"klaviyo_count_refunded_order\",\n  klaviyo_daily.\"count_received_email\" as \"klaviyo_count_received_email\",\n  klaviyo_daily.\"count_clicked_email\" as \"klaviyo_count_clicked_email\",\n  klaviyo_daily.\"count_opened_email\" as \"klaviyo_count_opened_email\",\n  klaviyo_daily.\"count_marked_email_as_spam\" as \"klaviyo_count_marked_email_as_spam\",\n  klaviyo_daily.\"count_unsubscribed\" as \"klaviyo_count_unsubscribed\",\n  klaviyo_daily.\"count_received_sms\" as \"klaviyo_count_received_sms\",\n  klaviyo_daily.\"count_clicked_sms\" as \"klaviyo_count_clicked_sms\",\n  klaviyo_daily.\"count_sent_sms\" as \"klaviyo_count_sent_sms\",\n  klaviyo_daily.\"count_unsubscribed_from_sms\" as \"klaviyo_count_unsubscribed_from_sms\",\n        klaviyo_daily.source_relation as klaviyo_source_relation\n\n    from shopify_daily\n    full outer join klaviyo_daily\n        on lower(shopify_daily.email) = lower(klaviyo_daily.email)\n        and shopify_daily.date_day = klaviyo_daily.date_day\n        and coalesce(shopify_daily.last_touch_campaign_id, '') = coalesce(klaviyo_daily.last_touch_campaign_id, '')\n        and coalesce(shopify_daily.last_touch_flow_id, '') = coalesce(klaviyo_daily.last_touch_flow_id, '')\n        and coalesce(shopify_daily.last_touch_variation_id, '') = coalesce(klaviyo_daily.variation_id, '')\n)\n\nselect *\nfrom combine_histories", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__daily_customer_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.059753Z", "completed_at": "2024-09-05T20:04:21.428682Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.429154Z", "completed_at": "2024-09-05T20:04:21.429160Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4008660316467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__flows", "compiled": true, "compiled_code": "with flow as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__flow\"\n),\n\nflow_metrics as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__campaign_flow_metrics\"\n),\n\nflow_join as (\n    \n    \n\n    select\n        flow.*, -- has flow_id and source_relation\n        \"variation_id\",\n  \"total_count_unique_people\",\n  \"first_event_at\",\n  \"last_event_at\",\n  \"sum_revenue_refunded_order\",\n  \"sum_revenue_placed_order\",\n  \"sum_revenue_ordered_product\",\n  \"sum_revenue_checkout_started\",\n  \"sum_revenue_cancelled_order\",\n  \"count_active_on_site\",\n  \"unique_count_active_on_site\",\n  \"count_viewed_product\",\n  \"unique_count_viewed_product\",\n  \"count_ordered_product\",\n  \"unique_count_ordered_product\",\n  \"count_placed_order\",\n  \"unique_count_placed_order\",\n  \"count_refunded_order\",\n  \"unique_count_refunded_order\",\n  \"count_received_email\",\n  \"unique_count_received_email\",\n  \"count_clicked_email\",\n  \"unique_count_clicked_email\",\n  \"count_opened_email\",\n  \"unique_count_opened_email\",\n  \"count_marked_email_as_spam\",\n  \"unique_count_marked_email_as_spam\",\n  \"count_unsubscribed\",\n  \"unique_count_unsubscribed\",\n  \"count_received_sms\",\n  \"unique_count_received_sms\",\n  \"count_clicked_sms\",\n  \"unique_count_clicked_sms\",\n  \"count_sent_sms\",\n  \"unique_count_sent_sms\",\n  \"count_unsubscribed_from_sms\",\n  \"unique_count_unsubscribed_from_sms\"\n\n    from flow\n    left join flow_metrics on (\n      flow.flow_id = flow_metrics.last_touch_flow_id\n      and\n      flow.source_relation = flow_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(flow_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as flow_variation_key\n\n    from flow_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__flows\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.054882Z", "completed_at": "2024-09-05T20:04:21.433209Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.433418Z", "completed_at": "2024-09-05T20:04:21.433422Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4111499786376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__campaigns", "compiled": true, "compiled_code": "with campaign as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__campaign\"\n),\n\ncampaign_metrics as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__campaign_flow_metrics\"\n),\n\ncampaign_join as (\n    \n    \n\n    select\n        campaign.*, -- has campaign_id and source_relation\n        \"variation_id\",\n  \"total_count_unique_people\",\n  \"first_event_at\",\n  \"last_event_at\",\n  \"sum_revenue_refunded_order\",\n  \"sum_revenue_placed_order\",\n  \"sum_revenue_ordered_product\",\n  \"sum_revenue_checkout_started\",\n  \"sum_revenue_cancelled_order\",\n  \"count_active_on_site\",\n  \"unique_count_active_on_site\",\n  \"count_viewed_product\",\n  \"unique_count_viewed_product\",\n  \"count_ordered_product\",\n  \"unique_count_ordered_product\",\n  \"count_placed_order\",\n  \"unique_count_placed_order\",\n  \"count_refunded_order\",\n  \"unique_count_refunded_order\",\n  \"count_received_email\",\n  \"unique_count_received_email\",\n  \"count_clicked_email\",\n  \"unique_count_clicked_email\",\n  \"count_opened_email\",\n  \"unique_count_opened_email\",\n  \"count_marked_email_as_spam\",\n  \"unique_count_marked_email_as_spam\",\n  \"count_unsubscribed\",\n  \"unique_count_unsubscribed\",\n  \"count_received_sms\",\n  \"unique_count_received_sms\",\n  \"count_clicked_sms\",\n  \"unique_count_clicked_sms\",\n  \"count_sent_sms\",\n  \"unique_count_sent_sms\",\n  \"count_unsubscribed_from_sms\",\n  \"unique_count_unsubscribed_from_sms\"\n\n    from campaign\n    left join campaign_metrics on (\n      campaign.campaign_id = campaign_metrics.last_touch_campaign_id\n      and\n      campaign.source_relation = campaign_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(campaign_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as campaign_variation_key\n\n    from campaign_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__campaigns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.456106Z", "completed_at": "2024-09-05T20:04:21.465955Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.466470Z", "completed_at": "2024-09-05T20:04:21.466475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011502981185913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__person_metrics\"\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.459858Z", "completed_at": "2024-09-05T20:04:21.466920Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.470859Z", "completed_at": "2024-09-05T20:04:21.470864Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015050172805786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__daily_customer_metrics_date_day__email__klaviyo_source_relation__shopify_source_relation__campaign_id__flow_id__variation_id.0489c190fd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__daily_customer_metrics\"\n    group by date_day, email, klaviyo_source_relation, shopify_source_relation, campaign_id, flow_id, variation_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.467142Z", "completed_at": "2024-09-05T20:04:21.471804Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.472441Z", "completed_at": "2024-09-05T20:04:21.472445Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0069429874420166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_variation_key, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__flows\"\n    group by flow_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.473032Z", "completed_at": "2024-09-05T20:04:21.480341Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.481032Z", "completed_at": "2024-09-05T20:04:21.481037Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009813785552978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_variation_key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__flows\"\nwhere flow_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.476707Z", "completed_at": "2024-09-05T20:04:21.480830Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.484151Z", "completed_at": "2024-09-05T20:04:21.484158Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012020111083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_variation_key, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__campaigns\"\n    group by campaign_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.481383Z", "completed_at": "2024-09-05T20:04:21.484895Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.485131Z", "completed_at": "2024-09-05T20:04:21.485135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005335807800292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_variation_key\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__campaigns\"\nwhere campaign_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.228511Z", "completed_at": "2024-09-05T20:04:21.518345Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.518559Z", "completed_at": "2024-09-05T20:04:21.518565Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3141448497772217, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__persons", "compiled": true, "compiled_code": "with person as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"stg_klaviyo__person\"\n),\n\nperson_metrics as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int_klaviyo__person_metrics\"\n),\n\nperson_join as (\n\n    select\n        person.*,\n        \"count_total_campaigns\",\n  \"count_total_flows\",\n  \"first_event_at\",\n  \"last_event_at\",\n  \"first_campaign_touch_at\",\n  \"last_campaign_touch_at\",\n  \"first_flow_touch_at\",\n  \"last_flow_touch_at\",\n  \"total_sum_revenue_refunded_order\",\n  \"organic_sum_revenue_refunded_order\",\n  \"total_sum_revenue_placed_order\",\n  \"organic_sum_revenue_placed_order\",\n  \"total_sum_revenue_ordered_product\",\n  \"organic_sum_revenue_ordered_product\",\n  \"total_sum_revenue_checkout_started\",\n  \"organic_sum_revenue_checkout_started\",\n  \"total_sum_revenue_cancelled_order\",\n  \"organic_sum_revenue_cancelled_order\",\n  \"total_count_active_on_site\",\n  \"total_count_viewed_product\",\n  \"total_count_ordered_product\",\n  \"total_count_placed_order\",\n  \"total_count_refunded_order\",\n  \"total_count_received_email\",\n  \"total_count_clicked_email\",\n  \"total_count_opened_email\",\n  \"total_count_marked_email_as_spam\",\n  \"total_count_unsubscribed\",\n  \"total_count_received_sms\",\n  \"total_count_clicked_sms\",\n  \"total_count_sent_sms\",\n  \"total_count_unsubscribed_from_sms\"\n\n    from person\n    left join person_metrics on (\n        person.person_id = person_metrics.person_id\n        and person.source_relation = person_metrics.source_relation\n    )\n\n)\n\nselect *\nfrom person_join", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__persons\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.554757Z", "completed_at": "2024-09-05T20:04:21.557966Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.558194Z", "completed_at": "2024-09-05T20:04:21.558201Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013991117477416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__persons\"\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.551837Z", "completed_at": "2024-09-05T20:04:21.558626Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.558831Z", "completed_at": "2024-09-05T20:04:21.558834Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015038251876831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__persons\"\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.544684Z", "completed_at": "2024-09-05T20:04:21.804880Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:21.805147Z", "completed_at": "2024-09-05T20:04:21.805153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28618597984313965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.int__klaviyo_person_rollup", "compiled": true, "compiled_code": "with persons as (\n\n    select\n        *,\n        row_number() over (partition by email order by created_at desc) as person_index\n    \n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"klaviyo__persons\"\n    where email is not null -- should never be the case but just in case\n\n), aggregate_persons as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        \n    string_agg(person_id, ', ')\n\n as person_ids,\n        \n    string_agg(distinct cast(phone_number as TEXT), ', ')\n\n as phone_numbers,\n        max( case when person_index = 1 then full_name else null end) as full_name,\n        \n        min(created_at) as first_klaviyo_account_made_at,\n        max(created_at) as last_klaviyo_account_made_at,\n        max(updated_at) as last_updated_at,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at,\n        min(first_campaign_touch_at) as first_campaign_touch_at,\n        max(last_campaign_touch_at) as last_campaign_touch_at,\n        min(first_flow_touch_at) as first_flow_touch_at,\n        max(last_flow_touch_at) as last_flow_touch_at,\n\n        sum(count_total_campaigns) as count_total_campaigns,\n        sum(count_total_flows) as count_total_flows\n\n\n        \n        \n        \n            \n        \n            \n            , max(case when person_index = 1 then address_1 else null end) as address_1\n            \n        \n            \n            , max(case when person_index = 1 then address_2 else null end) as address_2\n            \n        \n            \n            , max(case when person_index = 1 then city else null end) as city\n            \n        \n            \n            , max(case when person_index = 1 then country else null end) as country\n            \n        \n            \n            , max(case when person_index = 1 then zip else null end) as zip\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then latitude else null end) as latitude\n            \n        \n            \n            , max(case when person_index = 1 then longitude else null end) as longitude\n            \n        \n            \n            , max(case when person_index = 1 then organization else null end) as organization\n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then region else null end) as region\n            \n        \n            \n            , max(case when person_index = 1 then timezone else null end) as timezone\n            \n        \n            \n            , max(case when person_index = 1 then title else null end) as title\n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then last_event_date else null end) as last_event_date\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_refunded_order else null end) as total_sum_revenue_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_refunded_order else null end) as organic_sum_revenue_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_placed_order else null end) as total_sum_revenue_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_placed_order else null end) as organic_sum_revenue_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_ordered_product else null end) as total_sum_revenue_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_ordered_product else null end) as organic_sum_revenue_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_checkout_started else null end) as total_sum_revenue_checkout_started\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_checkout_started else null end) as organic_sum_revenue_checkout_started\n            \n        \n            \n            , max(case when person_index = 1 then total_sum_revenue_cancelled_order else null end) as total_sum_revenue_cancelled_order\n            \n        \n            \n            , max(case when person_index = 1 then organic_sum_revenue_cancelled_order else null end) as organic_sum_revenue_cancelled_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_active_on_site else null end) as total_count_active_on_site\n            \n        \n            \n            , max(case when person_index = 1 then total_count_viewed_product else null end) as total_count_viewed_product\n            \n        \n            \n            , max(case when person_index = 1 then total_count_ordered_product else null end) as total_count_ordered_product\n            \n        \n            \n            , max(case when person_index = 1 then total_count_placed_order else null end) as total_count_placed_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_refunded_order else null end) as total_count_refunded_order\n            \n        \n            \n            , max(case when person_index = 1 then total_count_received_email else null end) as total_count_received_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_clicked_email else null end) as total_count_clicked_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_opened_email else null end) as total_count_opened_email\n            \n        \n            \n            , max(case when person_index = 1 then total_count_marked_email_as_spam else null end) as total_count_marked_email_as_spam\n            \n        \n            \n            , max(case when person_index = 1 then total_count_unsubscribed else null end) as total_count_unsubscribed\n            \n        \n            \n            , max(case when person_index = 1 then total_count_received_sms else null end) as total_count_received_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_clicked_sms else null end) as total_count_clicked_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_sent_sms else null end) as total_count_sent_sms\n            \n        \n            \n            , max(case when person_index = 1 then total_count_unsubscribed_from_sms else null end) as total_count_unsubscribed_from_sms\n            \n        \n\n    from persons\n    group by 1,2\n)\n\nselect *\nfrom aggregate_persons", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__klaviyo_person_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:21.830821Z", "completed_at": "2024-09-05T20:04:22.149432Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:22.149728Z", "completed_at": "2024-09-05T20:04:22.149735Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34502315521240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_holistic_reporting.shopify_holistic_reporting__customer_enhanced", "compiled": true, "compiled_code": "with shopify_customers as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify__customer_emails\"\n\n), klaviyo_persons as (\n\n    select *\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"int__klaviyo_person_rollup\"\n\n), combine_customer_info as (\n\n    select\n        coalesce(shopify_customers.email, klaviyo_persons.email) as email,\n        coalesce(klaviyo_persons.full_name, shopify_customers.first_name || ' ' || shopify_customers.last_name) as full_name,\n        shopify_customers.customer_ids as shopify_customer_ids,\n        klaviyo_persons.person_ids as klaviyo_person_ids,\n        coalesce(shopify_customers.phone_numbers, klaviyo_persons.phone_numbers) as phone_number,\n        shopify_customers.first_account_created_at as shopify_customer_first_created_at,\n        shopify_customers.last_account_created_at as shopify_customer_last_created_at,\n        klaviyo_persons.first_klaviyo_account_made_at as klaviyo_person_first_created_at,\n        klaviyo_persons.last_klaviyo_account_made_at as klaviyo_person_last_created_at,\n        shopify_customers.last_updated_at as shopify_customer_last_updated_at,\n        klaviyo_persons.last_updated_at as klaviyo_person_last_updated_at,\n        shopify_customers.is_verified_email as is_shopify_email_verified,\n        shopify_customers.first_order_timestamp as shopify_first_order_at,\n        shopify_customers.most_recent_order_timestamp as shopify_last_order_at,\n\n        shopify_customers.customer_tags as shopify_customer_tags,\n  shopify_customers.marketing_consent_updated_at as shopify_marketing_consent_updated_at,\n  shopify_customers.last_fivetran_synced as shopify_last_fivetran_synced,\n  shopify_customers.is_tax_exempt as shopify_is_tax_exempt,\n  shopify_customers.default_address_id as shopify_default_address_id,\n  shopify_customers.account_state as shopify_account_state,\n  shopify_customers.note as shopify_note,\n  shopify_customers.currency as shopify_currency,\n  shopify_customers.marketing_consent_state as shopify_marketing_consent_state,\n  shopify_customers.marketing_opt_in_level as shopify_marketing_opt_in_level,\n  shopify_customers.lifetime_abandoned_checkouts as shopify_lifetime_abandoned_checkouts,\n  shopify_customers.first_order_timestamp as shopify_first_order_timestamp,\n  shopify_customers.most_recent_order_timestamp as shopify_most_recent_order_timestamp,\n  shopify_customers.avg_order_value as shopify_avg_order_value,\n  shopify_customers.lifetime_total_spent as shopify_lifetime_total_spent,\n  shopify_customers.lifetime_total_refunded as shopify_lifetime_total_refunded,\n  shopify_customers.lifetime_total_net as shopify_lifetime_total_net,\n  shopify_customers.lifetime_count_orders as shopify_lifetime_count_orders,\n  shopify_customers.avg_quantity_per_order as shopify_avg_quantity_per_order,\n  shopify_customers.lifetime_total_tax as shopify_lifetime_total_tax,\n  shopify_customers.avg_tax_per_order as shopify_avg_tax_per_order,\n  shopify_customers.lifetime_total_discount as shopify_lifetime_total_discount,\n  shopify_customers.avg_discount_per_order as shopify_avg_discount_per_order,\n  shopify_customers.lifetime_total_shipping as shopify_lifetime_total_shipping,\n  shopify_customers.avg_shipping_per_order as shopify_avg_shipping_per_order,\n  shopify_customers.lifetime_total_shipping_with_discounts as shopify_lifetime_total_shipping_with_discounts,\n  shopify_customers.avg_shipping_with_discounts_per_order as shopify_avg_shipping_with_discounts_per_order,\n  shopify_customers.lifetime_total_shipping_tax as shopify_lifetime_total_shipping_tax,\n  shopify_customers.avg_shipping_tax_per_order as shopify_avg_shipping_tax_per_order,\n        shopify_customers.source_relation as shopify_source_relation,\n\n        klaviyo_persons.first_event_at as klaviyo_first_event_at,\n  klaviyo_persons.last_event_at as klaviyo_last_event_at,\n  klaviyo_persons.first_campaign_touch_at as klaviyo_first_campaign_touch_at,\n  klaviyo_persons.last_campaign_touch_at as klaviyo_last_campaign_touch_at,\n  klaviyo_persons.first_flow_touch_at as klaviyo_first_flow_touch_at,\n  klaviyo_persons.last_flow_touch_at as klaviyo_last_flow_touch_at,\n  klaviyo_persons.count_total_campaigns as klaviyo_count_total_campaigns,\n  klaviyo_persons.count_total_flows as klaviyo_count_total_flows,\n  klaviyo_persons.address_1 as klaviyo_address_1,\n  klaviyo_persons.address_2 as klaviyo_address_2,\n  klaviyo_persons.city as klaviyo_city,\n  klaviyo_persons.country as klaviyo_country,\n  klaviyo_persons.zip as klaviyo_zip,\n  klaviyo_persons.latitude as klaviyo_latitude,\n  klaviyo_persons.longitude as klaviyo_longitude,\n  klaviyo_persons.organization as klaviyo_organization,\n  klaviyo_persons.region as klaviyo_region,\n  klaviyo_persons.timezone as klaviyo_timezone,\n  klaviyo_persons.title as klaviyo_title,\n  klaviyo_persons.last_event_date as klaviyo_last_event_date,\n  klaviyo_persons.total_sum_revenue_refunded_order as klaviyo_total_sum_revenue_refunded_order,\n  klaviyo_persons.organic_sum_revenue_refunded_order as klaviyo_organic_sum_revenue_refunded_order,\n  klaviyo_persons.total_sum_revenue_placed_order as klaviyo_total_sum_revenue_placed_order,\n  klaviyo_persons.organic_sum_revenue_placed_order as klaviyo_organic_sum_revenue_placed_order,\n  klaviyo_persons.total_sum_revenue_ordered_product as klaviyo_total_sum_revenue_ordered_product,\n  klaviyo_persons.organic_sum_revenue_ordered_product as klaviyo_organic_sum_revenue_ordered_product,\n  klaviyo_persons.total_sum_revenue_checkout_started as klaviyo_total_sum_revenue_checkout_started,\n  klaviyo_persons.organic_sum_revenue_checkout_started as klaviyo_organic_sum_revenue_checkout_started,\n  klaviyo_persons.total_sum_revenue_cancelled_order as klaviyo_total_sum_revenue_cancelled_order,\n  klaviyo_persons.organic_sum_revenue_cancelled_order as klaviyo_organic_sum_revenue_cancelled_order,\n  klaviyo_persons.total_count_active_on_site as klaviyo_total_count_active_on_site,\n  klaviyo_persons.total_count_viewed_product as klaviyo_total_count_viewed_product,\n  klaviyo_persons.total_count_ordered_product as klaviyo_total_count_ordered_product,\n  klaviyo_persons.total_count_placed_order as klaviyo_total_count_placed_order,\n  klaviyo_persons.total_count_refunded_order as klaviyo_total_count_refunded_order,\n  klaviyo_persons.total_count_received_email as klaviyo_total_count_received_email,\n  klaviyo_persons.total_count_clicked_email as klaviyo_total_count_clicked_email,\n  klaviyo_persons.total_count_opened_email as klaviyo_total_count_opened_email,\n  klaviyo_persons.total_count_marked_email_as_spam as klaviyo_total_count_marked_email_as_spam,\n  klaviyo_persons.total_count_unsubscribed as klaviyo_total_count_unsubscribed,\n  klaviyo_persons.total_count_received_sms as klaviyo_total_count_received_sms,\n  klaviyo_persons.total_count_clicked_sms as klaviyo_total_count_clicked_sms,\n  klaviyo_persons.total_count_sent_sms as klaviyo_total_count_sent_sms,\n  klaviyo_persons.total_count_unsubscribed_from_sms as klaviyo_total_count_unsubscribed_from_sms,\n        klaviyo_persons.source_relation as klaviyo_source_relation\n\n    from shopify_customers\n    full outer join klaviyo_persons \n        on shopify_customers.email = lower(klaviyo_persons.email) -- redshift doesn't like doing 2 lowers here. we lowercase shopify.email in an intermediate model\n\n)\n\nselect *\nfrom combine_customer_info", "relation_name": "\"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__customer_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-05T20:04:22.178528Z", "completed_at": "2024-09-05T20:04:22.182028Z"}, {"name": "execute", "started_at": "2024-09-05T20:04:22.182271Z", "completed_at": "2024-09-05T20:04:22.182278Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004588127136230469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_holistic_reporting.dbt_utils_unique_combination_of_columns_shopify_holistic_reporting__customer_enhanced_email__klaviyo_source_relation__shopify_source_relation.2ea9394109", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, klaviyo_source_relation, shopify_source_relation\n    from \"postgres\".\"shopify_holistic_reporting_integration_tests_12_shopify_holistic_reporting_dev\".\"shopify_holistic_reporting__customer_enhanced\"\n    group by email, klaviyo_source_relation, shopify_source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 6.983583927154541, "args": {"version_check": true, "invocation_command": "dbt docs generate -t postgres", "show_resource_report": false, "use_colors": true, "enable_legacy_logger": false, "populate_cache": true, "which": "generate", "partial_parse": true, "log_format_file": "debug", "strict_mode": false, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "log_level_file": "debug", "require_resource_names_without_spaces": false, "cache_selected_only": false, "printer_width": 80, "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/klaviyo/dbt_shopify_holistic_reporting/integration_tests", "select": [], "source_freshness_run_project_hooks": false, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "quiet": false, "static_parser": true, "empty_catalog": false, "favor_state": false, "partial_parse_file_diff": true, "use_colors_file": true, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/klaviyo/dbt_shopify_holistic_reporting/integration_tests/logs", "compile": true, "log_level": "info", "target": "postgres", "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/Users/joseph.markiewicz/.dbt", "print": true, "static": false, "macro_debugging": false, "exclude": [], "log_format": "default", "introspect": true, "indirect_selection": "eager", "defer": false}}